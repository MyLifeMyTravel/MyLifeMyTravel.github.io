<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>厉圣杰的博客</title>
  <subtitle>啦啦啦，德玛西亚</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.littlejie.com/"/>
  <updated>2017-02-20T11:49:50.000Z</updated>
  <id>http://www.littlejie.com/</id>
  
  <author>
    <name>厉圣杰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android 获取浏览器当前分享页面截屏</title>
    <link href="http://www.littlejie.com/2017/02/20/Android-%E8%8E%B7%E5%8F%96%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BD%93%E5%89%8D%E5%88%86%E4%BA%AB%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%B1%8F/"/>
    <id>http://www.littlejie.com/2017/02/20/Android-获取浏览器当前分享页面截屏/</id>
    <published>2017-02-20T11:49:07.000Z</published>
    <updated>2017-02-20T11:49:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-获取浏览器当前分享页面的截屏"><a href="#Android-获取浏览器当前分享页面的截屏" class="headerlink" title="Android 获取浏览器当前分享页面的截屏"></a>Android 获取浏览器当前分享页面的截屏</h1><blockquote>
<p>版权声明：本文为博主原创文章，未经博主允许不得转载。<br>微博：<a href="http://weibo.com/2952381050/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo" target="_blank" rel="external">厉圣杰</a><br>源码：<a href="https://github.com/MyLifeMyTravel/AndroidCore/blob/master/demo/src/main/java/com/littlejie/demo/modules/advance/BrowserScreenShotActivity.java" target="_blank" rel="external">AndroidDemo/BrowserScreenShotActivity</a><br><strong>文中如有纰漏，欢迎大家留言指出。</strong></p>
</blockquote>
<p>今天在项目中碰见这么一个需求：获取 Chrome 浏览器分享时，页面的截屏。静下来一想，既然是分享，那么肯定得通过 Intent 来传递数据，如果真的能获取到 Chrome 分享页面时的截屏，那么 Intent 的数据中，一定有 <code>.jpg</code> 或者 <code>.png</code> 结尾的数据。说干就干，Demo 写起来。</p>
<p>首先，新建一个 <code>BrowserScreenShotActivity.java</code>，在 <code>AndroidManifest.xml</code> 注册一下 <code>&lt;intent-filter&gt;</code>。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">          <span class="attr">package</span>=<span class="string">"com.littlejie.demo"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 读写权限 --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 用于读取浏览器分享时生成的屏幕截图 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">".modules.DemoApplication"</span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        </div><div class="line">        <span class="comment">&lt;!-- some other thing --&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 注册 Intent，用于接受浏览器分享 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">".modules.advance.BrowserScreenShotActivity"</span></div><div class="line">            <span class="attr">android:launchMode</span>=<span class="string">"singleTask"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.SEND"</span>/&gt;</span></div><div class="line">                <span class="comment">&lt;!-- 发送多个数据 --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.SEND_MULTIPLE"</span>/&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:mimeType</span>=<span class="string">"*/*"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>接下去，在浏览器中随便打开一个页面，分享至 Demo，这里有个问题，就是：屏幕截图数据在 Intent 中对应的 Key 我们并不知道，那怎么办呢？打断点啊！</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://odsdowehg.bkt.clouddn.com/屏幕快照" alt="屏幕快照" title="">
                </div>
                <div class="image-caption">屏幕快照</div>
            </figure>
<p>通过断点查看 Intent 的数据结构，发现 Intent 中的 mMap 成员变量含有一个 Uri，格式如下：<code>content://com.android.chrome.FileProvider/BlockedFile_33215122012582</code>，一眼看去就猜测这个 Uri 是 Chrome 通过 ContentProvider 供其他程序调用的，虽然与一开始猜测<strong>有已 .jpg 和 .png 结尾的数据</strong>不太一致，但好歹是有所发现。</p>
<p>恩，现在还有一个问题，那就是 <code>mMap.value[3]</code> 对应的 key 值是多少？在上述断点界面根本就差看不到，但是 Android Studio 是很强大的，只是你没发现而已，既然 mMap 是一个 Map，那么久能通过 <code>keySet()</code> 方法获取 Map 的 key。接下来就是 Android Studio 大展拳脚的时间。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://odsdowehg.bkt.clouddn.com/屏幕快照" alt="屏幕快照" title="">
                </div>
                <div class="image-caption">屏幕快照</div>
            </figure>
<p>如上图所示的，在 Debug 界面，点击最后一个图标:Evaluate Expression（快捷键：option + f8）。在弹出的对话框中输入如下内容，回车，你会发现 Map 的 key 都出来了：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://odsdowehg.bkt.clouddn.com/屏幕快照" alt="屏幕快照" title="">
                </div>
                <div class="image-caption">屏幕快照</div>
            </figure></p>
<p>通过与第一幅图对比，发现下标为3的值（share_screenshot_as_stream）为我们需要的 key。</p>
<p>布局比较简单，这里就不贴了，简单截取 <code>BrowserSrceenShotActivity.java</code> 中的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="keyword">super</span>.onResume();</div><div class="line">   <span class="keyword">if</span> (getIntent() == <span class="keyword">null</span>) &#123;</div><div class="line">       <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   Uri screenShot = getIntent().getExtras().getParcelable(<span class="string">"screen_shot_as_stream"</span>);</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (screenShot == <span class="keyword">null</span>) &#123;</div><div class="line">       ToastUtil.showDefaultToast(<span class="string">"获取浏览器截屏失败~"</span>);</div><div class="line">       <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">try</span> &#123;</div><div class="line">       <span class="comment">//通过 Uri 获取截屏图片的输入流</span></div><div class="line">       InputStream is = getContentResolver().openInputStream(screenShot);</div><div class="line">       mIvScreenShot.setImageBitmap(BitmapFactory.decodeStream(is));</div><div class="line">   &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">       e.printStackTrace();</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果如下：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://odsdowehg.bkt.clouddn.com/screenshot.png" alt="screenshot" title="">
                </div>
                <div class="image-caption">screenshot</div>
            </figure></p>
<p>对于获取 Chrome 浏览器分享页面的截屏就告一段落，闲着没事，自己又测试了几个浏览器，包括系统内置浏览器、QQ浏览器、UC浏览器、百度浏览器、火狐浏览器，发现每个浏览器的差异很大。</p>
<ul>
<li>系统浏览器、UC浏览器与 Chrome 相差不大，只是 key 变成了 <code>share_full_screen</code> 和 <code>file</code></li>
<li>QQ浏览器的分享行为与分享文件很相似，其 key 为 <code>android.intent.extra.STREAM</code>(Intent.EXTRA_STREAM)。</li>
<li>百度浏览器是个什么鬼就不知道了，默默的把应用图标给分享过来了</li>
<li>火狐浏览器不支持分享页面截图</li>
</ul>
<p>恩，就这么多，获取浏览器分享页面截屏主要还是靠浏览器的支持，真的市面上这么多浏览器适配起来还真麻烦。这次主要对 Android Studio 强大的 Debug功能进行了学习。PS：Android Studio真是极其强大的工具，用好它事半功倍，唯一不足的就是太耗性能。</p>
<p><a href="https://github.com/MyLifeMyTravel/AndroidCore/blob/master/demo/src/main/java/com/littlejie/demo/modules/advance/BrowserScreenShotActivity.java" target="_blank" rel="external">Demo 代码传送门</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-获取浏览器当前分享页面的截屏&quot;&gt;&lt;a href=&quot;#Android-获取浏览器当前分享页面的截屏&quot; class=&quot;headerlink&quot; title=&quot;Android 获取浏览器当前分享页面的截屏&quot;&gt;&lt;/a&gt;Android 获取浏览器当前分享页面的
    
    </summary>
    
      <category term="Android" scheme="http://www.littlejie.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.littlejie.com/tags/Android/"/>
    
      <category term="浏览器" scheme="http://www.littlejie.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Android 开发规范</title>
    <link href="http://www.littlejie.com/2017/02/13/Android-%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    <id>http://www.littlejie.com/2017/02/13/Android-开发规范/</id>
    <published>2017-02-13T12:15:23.000Z</published>
    <updated>2017-02-13T23:47:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>个人总结的 Android 开发规范初稿，其中控件缩写及 Android 资源文件命名部分不是很确定，有待商榷。Java 部分编程风格请参考：<a href="http://www.hawstein.com/posts/google-java-style.html" target="_blank" rel="external">Google Java 命名规范</a>。</p>
<p>2017-02-13 更新：2017年开春之际，诚意献上重磅大礼：阿里巴巴Java开发手册，首次公开阿里官方Java代码规范标准。这套Java统一规范标准将有助于提高行业编码规范化水平，帮助行业人员提高开发质量和效率、大大降低代码维护成本。<a href="https://yq.aliyun.com/attachment/download/?id=1170" target="_blank" rel="external">点此下载</a></p>
<h2 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h2><ol>
<li>统一调整 IDE 的编码方式为 UTF-8<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://odsdowehg.bkt.clouddn.com/01.png" alt="01" title="">
                </div>
                <div class="image-caption">01</div>
            </figure></li>
<li>统一调整 IDE 的 Tab 缩进为 4 个空格<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://odsdowehg.bkt.clouddn.com/0.png" alt="0" title="">
                </div>
                <div class="image-caption">0</div>
            </figure></li>
<li><p>花括号不要单独一行，和它前面的代码同一行。而且，花括号与前面的代码之间用一个空格隔开。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123; <span class="comment">// Good </span></div><div class="line"> </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span></div><div class="line">&#123; <span class="comment">// Bad</span></div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123; <span class="comment">// Bad</span></div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>空格的使用：if、else、for、switch、while等逻辑关键字与后面的语句留一个空格隔开。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Good</span></div><div class="line"><span class="keyword">if</span> (booleanVariable) &#123;</div><div class="line">    <span class="comment">// TODO while booleanVariable is true</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// TODO else</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// Bad</span></div><div class="line"><span class="keyword">if</span>(booleanVariable) &#123;</div><div class="line">    <span class="comment">// TODO while booleanVariable is true</span></div><div class="line">&#125;<span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// TODO else</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 运算符两边各用一个空格隔开。</span></div><div class="line"><span class="keyword">int</span> result = a + b; <span class="comment">//Good, = 和 + 两边各用一个空格隔开</span></div><div class="line"><span class="keyword">int</span> result=a+b; <span class="comment">//Bad,=和+两边没用空格隔开</span></div><div class="line"></div><div class="line"><span class="comment">// 方法的每个参数之间用一个空格隔开。</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String param1, String param2)</span></span>; <span class="comment">// Good，param1后面的逗号与String之间隔了一个空格</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(param1, param2)</span></span>; <span class="comment">// Good，方法调用时，param1后面的逗号与param2之间隔了一个空格</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(param1,param2)</span></span>; <span class="comment">// Bad，没有用一个空格隔开</span></div></pre></td></tr></table></figure>
</li>
<li><p>空行的使用，拒绝拖沓无分割，关联代码段放一块并与后面代码分割</p>
<ul>
<li>两个方法之间</li>
<li>方法内的两个逻辑段之间</li>
<li>方法内的局部变量和方法的第一条逻辑语句之间</li>
<li>常量和变量之间</li>
<li><strong>方法名和方法内第一条语句不要有空格</strong></li>
</ul>
</li>
<li>Activity.onCreate()，Fragment.onActivityCreated()，作为程序入口，不要写入太多代码，尽量保持只调用 initXXX() 方法，简单明了展示调用过程。如：initData()，initView()。可在 BaseActivity 、 BaseFragment 中实现 init 执行顺序，子类实现，即 <strong>模板方法模式</strong>。</li>
<li><strong>Application 中只执行应用初始化相关操作，尽量不要涉及业务逻辑。如有，请单独剥离。参考第 6 条</strong></li>
<li>单个方法体不要过长，最好不要超过一屏，竖屏显示器请无视~</li>
<li>一行声明一个变量，不要一行声明多个变量，这样有利于写注释。</li>
<li>代码任何地方不要拼错单词</li>
<li><p><strong>代码必须格式化</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Windows：CTRL + ALT + L</div><div class="line">Mac：OPTION + COMMAND + L</div></pre></td></tr></table></figure>
</li>
<li><p>文字大小的单位统一用 sp，元素大小的单位统一用 dp；应用中的字符串统一在 <code>/values/strings.xml</code> 中定义；颜色值统一在 <code>/values/colors.xml</code> 中定义；菜单定义统一放在 <code>/menu/****.xml</code> 中；自定义View 属性统一在 <code>/values/attrs.xml</code> 中；自定义drawable 文件统一在 <code>/drawable/****.xml</code> 中；自定义样式统一在 <code>/values/styles.xml</code>。</p>
</li>
<li>调用方法保持“临近原则”，被调用的方法，放在调用方法下方</li>
<li>用好 TODO 标记<ul>
<li>记录想法，记录功能点，开发过程中可以利用 TODO 记录一下临时想法或为了不打扰思路留下待完善的说明</li>
<li>删除无用 TODO ，开发工具自动生成的 TODO ，或则已经完善的 TODO ，一定要删除。</li>
</ul>
</li>
<li>处理“魔法数字”等看不懂的神秘数字<ul>
<li>代码中不要出现数字，特别是一些标识不同类型的数字。</li>
<li>所有意义数字全部抽取到 Constant 公共类中，避免散布在各位类中。</li>
<li>所有有意义的字符串公共常量全部抽取到 Constant 公共类中</li>
</ul>
</li>
</ol>
<h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><p><strong>命名除了要遵守以下规范，还得见名知意。</strong></p>
<h3 id="类和接口命名"><a href="#类和接口命名" class="headerlink" title="类和接口命名"></a>类和接口命名</h3><p>使用大驼峰规则，用名词或名词词组命名，每个单词的首字母大写。<br>以下为几种常用类的命名：</p>
<ul>
<li>Activity 类，命名以 Activity 为后缀，如：<code>LoginActivity</code></li>
<li>Fragment 类，命名以 Fragment 为后缀，如：<code>LoginFragment</code></li>
<li>Service 类，命名以 Service 为后缀，如：<code>DownloadService</code></li>
<li>Adapter 类，命名以 Adapter 为后缀，如：<code>CouponAdapter</code></li>
<li>工具类，命名以 Util 为后缀，如：<code>EncryptUtil</code></li>
<li>模型类，命名以 Info 为后缀，如：<code>UserInfo</code></li>
<li>接口实现类，命名以 Impl 为后缀，如：<code>ApiImpl</code></li>
</ul>
<h3 id="方法命名"><a href="#方法命名" class="headerlink" title="方法命名"></a>方法命名</h3><p>使用小驼峰规则，用动词命名，<strong>第一个单词的首字母小写</strong>，其他单词的首字母大写。以下为几种常用方法的命名：</p>
<ul>
<li>初始化方法，命名以 init 开头，例：initView()</li>
<li>按钮点击方法或 Activity 跳转方法，命名以 to 开头，例：toLogin()、toMainActivity()</li>
<li>设置方法，命名以 set 开头，例：setData()</li>
<li>具有返回值的获取方法，命名以 get 开头，例：getData()</li>
<li>通过异步加载数据的方法，命名以 load 开头，例：loadData()</li>
<li>布尔型的判断方法，命名以 is 或 has ，或具有逻辑意义的单词如 equals ，例：isEmpty()</li>
</ul>
<h3 id="常量命名"><a href="#常量命名" class="headerlink" title="常量命名"></a>常量命名</h3><p>全部为大写单词，单词之间用下划线分开。常量一般放在 <code>Constant</code> 类</p>
<ul>
<li>Intent 参数以 <strong>PARAM_EXTRA</strong> 开头 </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Intent 参数</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String PARAM_EXTRA_ID = <span class="string">"id"</span>;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> PAGE_SIZE = <span class="number">20</span>;</div></pre></td></tr></table></figure>
<h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><p>使用驼峰规则，首字母必须小写，使用名词或名词词组。要求简单易懂，富于描述，不允许出现无意义或错误单词。</p>
<ul>
<li>成员变量命名以 <code>mCamelCase</code> 样式命名</li>
<li><strong>boolean 类型的成员变量命名可以不遵循第一条</strong>，以 <code>lowerCamelCase</code> 样式命名</li>
<li>控件变量命名都已 控件缩写 + 控件作用 来命名，如：登录按钮命名为 mBtnLogin；</li>
<li>参数变量、临时变量都已 <code>lowerCamelCase</code> 样式命名</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Button mBtnLogin;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isLaunch;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">(String text)</span> </span>&#123;</div><div class="line">        <span class="comment">// Todo...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="控件缩写"><a href="#控件缩写" class="headerlink" title="控件缩写"></a>控件缩写</h3><p>常见控件缩写约定如下：</p>
<ul>
<li>TextView: tv</li>
<li>EditText: edt</li>
<li>Button: btn</li>
<li>RadioButton: rb</li>
<li>ImageButton: ib</li>
<li>ImageView: iv</li>
<li>RelativeLayout/LinearLayout/FrameLayout: rl , ll , fl</li>
<li>ListView: lv</li>
<li>WebView: web</li>
<li>CheckBox: cbx</li>
</ul>
<h3 id="控件-id-命名"><a href="#控件-id-命名" class="headerlink" title="控件 id 命名"></a>控件 id 命名</h3><p>控件缩写_含义，范围可选，只在有明确定义的范围内才需要加上。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 这是标题栏的标题 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/tv_header_title"</span></div><div class="line">    <span class="attr">...</span> /&gt;</div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">--</span> 这是登录按钮 <span class="attr">--</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/btn_login"</span></div><div class="line">    <span class="attr">...</span> /&gt;</div></pre></td></tr></table></figure>
<h3 id="布局文件命名"><a href="#布局文件命名" class="headerlink" title="布局文件命名"></a>布局文件命名</h3><ul>
<li>Activity 布局：activity_类名.xml，建议使用 Android Studio 生成</li>
<li>Fragment 布局：fragment_类名.xml</li>
<li>控件布局：widget_控件名.xml</li>
<li>Adapter Item 布局：item_适配器名.xml</li>
</ul>
<h3 id="strings-xml-命名"><a href="#strings-xml-命名" class="headerlink" title="strings.xml 命名"></a>strings.xml 命名</h3><p>类型<em>{范围}</em>功能，范围可选。<br>以下为几种常用的命名：</p>
<ul>
<li>页面标题，命名格式为：title_页面</li>
<li>按钮文字，命名格式为：btn_按钮事件</li>
<li>标签文字，命名格式为：label_标签文字</li>
<li>选项卡文字，命名格式为：tab_选项卡文字</li>
<li>消息框文字，命名格式为：toast_消息</li>
<li>编辑框的提示文字，命名格式为：hint_提示信息</li>
<li>图片的描述文字，命名格式为：desc_图片文字</li>
<li>对话框的文字，命名格式为：dialog_文字</li>
<li>menu 的 item 文字，命名格式为：menu_文字</li>
</ul>
<h3 id="colors-xml-命名"><a href="#colors-xml-命名" class="headerlink" title="colors.xml 命名"></a>colors.xml 命名</h3><p>前缀{<em>控件}{</em>范围}{_后缀}，控件、范围、后缀可选，但控件和范围至少要有一个。</p>
<ul>
<li>背景颜色，添加 bg 前缀</li>
<li>文本颜色，添加 text 前缀</li>
<li>分割线颜色，添加 div 前缀</li>
<li>区分状态时，默认状态的颜色，添加 normal 后缀</li>
<li>区分状态时，按下时的颜色，添加 pressed 后缀</li>
<li>区分状态时，选中时的颜色，添加 selected 后缀</li>
<li>区分状态时，不可用时的颜色，添加 disable 后缀</li>
</ul>
<h3 id="drawable的命名"><a href="#drawable的命名" class="headerlink" title="drawable的命名"></a>drawable的命名</h3><p>前缀{<em>控件}{</em>范围}{_后缀}，控件、范围、后缀可选，但控件和范围至少要有一个。</p>
<ul>
<li>图标类，添加 ic 前缀</li>
<li>背景类，添加 bg 前缀</li>
<li>分隔类，添加 div 前缀</li>
<li>默认类，添加 def 前缀</li>
<li>区分状态时，默认状态，添加 normal 后缀</li>
<li>区分状态时，按下时的状态，添加 pressed 后缀</li>
<li>区分状态时，选中时的状态，添加 selected 后缀</li>
<li>区分状态时，不可用时的状态，添加 disable 后缀</li>
<li>多种状态的，添加 selector 后缀（一般为 ListView 的 selector 或按钮的 selector ）</li>
</ul>
<h2 id="注释规范"><a href="#注释规范" class="headerlink" title="注释规范"></a>注释规范</h2><h3 id="类和接口注释"><a href="#类和接口注释" class="headerlink" title="类和接口注释"></a>类和接口注释</h3><p>类和接口统一添加javadoc注释，格式如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 类或接口的描述信息</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> $&#123;USER&#125;</div><div class="line"> * <span class="doctag">@date</span> $&#123;DATE&#125;</div><div class="line"> */</div><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Login</span> </span>&#123;</div><div class="line"> </div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="方法注释"><a href="#方法注释" class="headerlink" title="方法注释"></a>方法注释</h3><p>下面几种方法，都必须添加注释，说明该方法的用途和参数说明，以及返回值。<strong>如不添加注释，方法和参数命名都要见名知意</strong></p>
<ul>
<li>接口中定义的所有方法</li>
<li>抽象类中自定义的抽象方法</li>
<li>抽象父类的自定义公用方法</li>
<li>工具类的公用方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 登录</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> loginName 登录名</div><div class="line"> * <span class="doctag">@param</span> password 密码</div><div class="line"> * <span class="doctag">@param</span> listener 回调监听器</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String loginName, String password, ActionCallbackListener listener)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="变量和常量注释"><a href="#变量和常量注释" class="headerlink" title="变量和常量注释"></a>变量和常量注释</h3><p>下面几种情况下的常量和变量，都要添加注释说明，优先采用 右侧// 来注释，若注释说明太长则在上方添加注释。</p>
<ul>
<li>接口中定义的所有常量</li>
<li>公有类的公有常量</li>
<li>枚举类定义的所有枚举常量</li>
<li>实体类的所有属性变量</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_CASH = <span class="number">1</span>; <span class="comment">// 现金券</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_DEBIT = <span class="number">2</span>; <span class="comment">// 抵扣券</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_DISCOUNT = <span class="number">3</span>; <span class="comment">// 折扣券</span></div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> id; <span class="comment">// 券id</span></div><div class="line"><span class="keyword">private</span> String name; <span class="comment">// 券名称</span></div><div class="line"><span class="keyword">private</span> String introduce; <span class="comment">// 券简介</span></div></pre></td></tr></table></figure>
<h2 id="发布及安全"><a href="#发布及安全" class="headerlink" title="发布及安全"></a>发布及安全</h2><h2 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h2><p><strong>版本管理一般使用 Git</strong></p>
<ul>
<li>打包前必须pull一下代码</li>
<li><strong>打包发版后，打上tag，push代码</strong></li>
<li><strong>打包后记得保存未加密过的包和mapping文件</strong></li>
</ul>
<ol>
<li>建议使用 Git 进行版本管理，正式打包前先 pull 一下代码，保证发布版本为最新代码；版本发布后，打 tag 并 push 到服务器</li>
<li><p>正式版本需要打开 <strong>混淆</strong>，防止被反编译，gradle 项目在 buildTypes 中配置，混淆的配置文件为 proguard-android.txt</p>
 <figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//必须在productFlavors之后</span></div><div class="line">buildTypes &#123;</div><div class="line">   release &#123;</div><div class="line">       <span class="comment">//开启混淆</span></div><div class="line">       minifyEnabled <span class="keyword">true</span></div><div class="line">       <span class="comment">//打包时移除不用资源</span></div><div class="line">       shrinkResources <span class="keyword">true</span></div><div class="line">       proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></div><div class="line">       <span class="comment">//不同渠道使用不同的签名</span></div><div class="line">       signingConfig signingConfigs.sign</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   debug &#123;</div><div class="line">       signingConfig signingConfigs.sign</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>正式版本发布时需要关闭 Log ，防止 Log 调试信息的打印造成重要数据泄露。一般思路为封装 LogUtil，在其中根据 <strong>BuildConfig.Debug</strong> 判断是否输出日志</p>
</li>
<li>测试第三方SDK时，如对签名有要求，可以在 debug 时使用正式签名</li>
<li>正式发布版本时，可用第三方工具加密，如：360加密、爱加密，<strong>加密后最好测试下，可能会有兼容性问题</strong></li>
<li>打包后记得保存未加密的包并保存 mapping 文件(列出了原始的类，方法和字段名与混淆后代码间的映射)</li>
</ol>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ol>
<li><p>控制语句</p>
<ul>
<li><p>减少条件嵌套，不要超过3层</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Bad</span></div><div class="line"><span class="keyword">if</span>(obj != <span class="keyword">null</span>) &#123; doSomething(); &#125;</div><div class="line"><span class="comment">// Good</span></div><div class="line"><span class="keyword">if</span>(obj == <span class="keyword">null</span>) &#123; <span class="keyword">return</span>; &#125; doSomething();</div></pre></td></tr></table></figure>
</li>
<li><p><strong>if语句必须用{}包括起来,即便是只有一句</strong></p>
</li>
</ul>
</li>
</ol>
<ul>
<li>方法<ul>
<li>拆分臃肿方法，每个方法只作一件事</li>
<li>做同一个逻辑的方法，尽量靠近放到一块，方便查看</li>
<li><strong>尽量不要使用 try catch 处理业务逻辑</strong></li>
<li>使用JSON工具类，不要手动解析和拼装数据，如：Gson</li>
</ul>
</li>
<li>重构相关书籍<ul>
<li>《重构-改善既有代码的设计》</li>
</ul>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>关于 colors.xml 和 drawable 命名很久之前摘自某篇博文，忘记具体链接了，如有侵权，请联系我~</p>
<blockquote>
<p>邮箱：1025263614@qq.com</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;个人总结的 Android 开发规范初稿，其中控件缩写及 Android 资源文件命名部分不是很确定，有待商榷。Java 部分编程风格请参考：&lt;a href=&quot;http://www.hawstein.com/posts/google-java-style.html&quot; tar
    
    </summary>
    
      <category term="Android" scheme="http://www.littlejie.com/categories/Android/"/>
    
      <category term="Java" scheme="http://www.littlejie.com/categories/Android/Java/"/>
    
    
      <category term="Android" scheme="http://www.littlejie.com/tags/Android/"/>
    
      <category term="开发规范" scheme="http://www.littlejie.com/tags/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 实现 Android 多渠道定制化打包</title>
    <link href="http://www.littlejie.com/2016/10/01/Gradle-%E5%AE%9E%E7%8E%B0-Android-%E5%A4%9A%E6%B8%A0%E9%81%93%E5%AE%9A%E5%88%B6%E5%8C%96%E6%89%93%E5%8C%85/"/>
    <id>http://www.littlejie.com/2016/10/01/Gradle-实现-Android-多渠道定制化打包/</id>
    <published>2016-10-01T04:12:43.000Z</published>
    <updated>2017-02-13T23:48:58.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>版权声明：本文为博主原创文章，未经博主允许不得转载。</p>
</blockquote>
<p>最近在项目中遇到需要实现 Apk 多渠道、定制化打包， Google 、百度查找了一些资料，成功实现了上述功能，在此记录以备不时之需，温故而知新，可以为师矣~</p>
<p>需求可以总结如下：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://odsdowehg.bkt.clouddn.com/多渠道打包.png" alt="多渠道打包" title="">
                </div>
                <div class="image-caption">多渠道打包</div>
            </figure></p>
<h1 id="如何实现多个-Apk-安装在同一设备"><a href="#如何实现多个-Apk-安装在同一设备" class="headerlink" title="如何实现多个 Apk 安装在同一设备"></a>如何实现多个 Apk 安装在同一设备</h1><p>在之前的印象中，同一个应用在同一设备上只能安装一个，除非手动修改 AndroidManifest.xml 文件中的包名（ <code>package</code> ），但这么做的后果就是新的应用真的是新的应用，旧版应用再也收不到更新。而现在你通过 Gradle，你可以轻松构建多个不同版本的应用，并且在同一设备上安装使用。</p>
<p>这里要用到 <a href="http://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.ProductFlavor.html" target="_blank" rel="external">productFlavors</a> ，productFlavors 可以用来自定义应用构建版本，我们可以用其 <code>applicationId</code> 属性来实现多个 Apk 安装在同一设备上。</p>
<p>build.gradle 中部分配置代码如下：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">24</span></div><div class="line">    buildToolsVersion <span class="string">"24.0.1"</span></div><div class="line"></div><div class="line">    <span class="comment">//默认配置,所有 productFlavors 都会继承 defaultConfig 中配置的属性</span></div><div class="line">    defaultConfig &#123;</div><div class="line">        <span class="comment">//默认的 applicationId,一般与 AndroidManifest.xml 文件 package属性相同</span></div><div class="line">        applicationId <span class="string">"com.littlejie.multichannel"</span></div><div class="line">        minSdkVersion <span class="number">15</span></div><div class="line">        targetSdkVersion <span class="number">24</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// productFlavors 定义了一个应用的自定义构建版本</span></div><div class="line">    <span class="comment">//一个单一的项目可以同时定义多个不同的 flavor 来改变应用的输出。</span></div><div class="line">    <span class="comment">// productFlavors 这个概念是为了解决不同的版本之间的差异非常小的情况，通常用于区分同一个应用的不同渠道/客户等，可包含少量业务功能差别。</span></div><div class="line">    <span class="comment">// productFlavors 中的 flavor 不能跟 buildType 中的一样,否则会报: "ProductFlavor names cannot collide with BuildType names"</span></div><div class="line">    productFlavors &#123;</div><div class="line"></div><div class="line">        <span class="comment">//默认版本,不设置 applicationId ,继承 defaultConfig 中的配置</span></div><div class="line">        flavors_default &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//开发版本, applicationId 替换为 com.littlejie.multichannel.dev</span></div><div class="line">        flavors_dev &#123;</div><div class="line">            applicationId <span class="string">"com.littlejie.multichannel.dev"</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//发布版本, applicationId 替换为 com.littlejie.multichannel.release</span></div><div class="line">        flavors_release &#123;</div><div class="line">            applicationId <span class="string">"com.littlejie.multichannel.release"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>MainActivity.java:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity.class.getSimpleName();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Log.d(TAG, <span class="string">"package name = "</span> + <span class="keyword">this</span>.getPackageName());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 Android Studio 中执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//打 debug 包，gradle 命令会在后面 `gradle task`中详细讲述</div><div class="line">gradle clean assembleDebug</div></pre></td></tr></table></figure>
<p>打包完成后，将 Apk 安装到模拟器(<code>adb install name.apk</code>)，运行，log 如下：</p>
<p>flavors_default:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">09-17 22:43:55.390 19747-19747/com.littlejie.multichannel D/MainActivity: package name = com.littlejie.multichannel</div></pre></td></tr></table></figure>
<p>flavors_dev:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">09-17 22:11:30.860 2638-2638/com.littlejie.multichannel.dev D/MainActivity: package name = com.littlejie.multichannel.dev</div></pre></td></tr></table></figure>
<p>flavors_release:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">09-17 22:44:55.610 20650-20650/com.littlejie.multichannel.release D/MainActivity: package name = com.littlejie.multichannel.release</div></pre></td></tr></table></figure>
<p>从这里可以看出，不同 flavor 的 package name 被 applicationId 替换掉了，而且同一个模拟器上可以同时安装以上三个应用。</p>
<p>下面我们再看看 AndroidManifest.xml 中发生了什么变化。这里需要用到 aapt 来查看 AndroidManifest.xml 的信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//输出 apk 的 AndroidManifest.xml 文件的信息</div><div class="line">aapt dump xmltree ***.apk AndroidManifest.xml</div></pre></td></tr></table></figure>
<p>关于 aapt 使用的更多用法，可以阅读这篇博文：<a href="http://blog.csdn.net/g19920917/article/details/20244937" target="_blank" rel="external">使用 aapt 查看 apk 的各种信息</a></p>
<p>下面是 flavors_dev 版本的信息，可以看出 Java 源文件的包名并没有发生改变，而 package 属性的值被替换为 applicationId了。</p>
<p><strong>如果在申请第三方 SDK 接入，则对应的包名应该填 applicationId ，而不是 AndroidManifest.xml 中的默认值</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">lishengjiedeMacBook-Pro:apk littlejie$ aapt dump xmltree multichannel-flavors_dev-debug.apk AndroidManifest.xml</div><div class="line">N: android=http://schemas.android.com/apk/res/android</div><div class="line">  E: manifest (line=2)</div><div class="line">    A: android:versionCode(0x0101021b)=(type 0x10)0x1</div><div class="line">    A: android:versionName(0x0101021c)=&quot;1.0&quot; (Raw: &quot;1.0&quot;)</div><div class="line">    //此处 package 的值已替换成 applicationId 的值</div><div class="line">    A: package=&quot;com.littlejie.multichannel.dev&quot; (Raw: &quot;com.littlejie.multichannel.dev&quot;)</div><div class="line">    A: platformBuildVersionCode=(type 0x10)0x18 (Raw: &quot;24&quot;)</div><div class="line">    A: platformBuildVersionName=(type 0x4)0x40e00000 (Raw: &quot;7.0&quot;)</div><div class="line">    E: uses-sdk (line=7)</div><div class="line">      A: android:minSdkVersion(0x0101020c)=(type 0x10)0xf</div><div class="line">      A: android:targetSdkVersion(0x01010270)=(type 0x10)0x18</div><div class="line">    E: application (line=11)</div><div class="line">      A: android:theme(0x01010000)=@0x7f08008e</div><div class="line">      A: android:label(0x01010001)=@0x7f060020</div><div class="line">      A: android:icon(0x01010002)=@0x7f030000</div><div class="line">      A: android:debuggable(0x0101000f)=(type 0x12)0xffffffff</div><div class="line">      A: android:allowBackup(0x01010280)=(type 0x12)0xffffffff</div><div class="line">      A: android:supportsRtl(0x010103af)=(type 0x12)0xffffffff</div><div class="line">      // Activity 的包名还是原来 AndroidManifest.xml 中申明的</div><div class="line">      E: activity (line=17)</div><div class="line">        A: android:name(0x01010003)=&quot;com.littlejie.multichannel.MainActivity&quot; (Raw: &quot;com.littlejie.multichannel.MainActivity&quot;)</div><div class="line">        E: intent-filter (line=18)</div><div class="line">          E: action (line=19)</div><div class="line">            A: android:name(0x01010003)=&quot;android.intent.action.MAIN&quot; (Raw: &quot;android.intent.action.MAIN&quot;)</div><div class="line">          E: category (line=21)</div><div class="line">            A: android:name(0x01010003)=&quot;android.intent.category.LAUNCHER&quot; (Raw: &quot;android.intent.category.LAUNCHER&quot;)</div></pre></td></tr></table></figure>
<p>applicationId 的原理可以理解为在 gradle 打包的时，动态合并属性，将 package 替换为 applicationId 指定的值，但并不会替换 Java 文件的包名，包括生成的 R 文件(可以去对应 module 下的 build/generated 目录下查看对应 flavor 的 R 文件)。 </p>
<p>另外，由于最终生成的包中 AndroidManifest.xml 文件中的 package 属性被 applicationId 替换掉，故对于某些第三方 SDK ，如：微信、高德地图等需要验证包名的，就会碰到相当蛋疼的事，每个包都需要重新去生成 APPID 和 APPKEY，如果渠道很多，那么像微信就会出现问题微信账号申请的应用数就会超出微信的限制。</p>
<p>Android 官方文档原文如下：</p>
<blockquote>
<p>Therefore, we have decoupled the two usages of package name:</p>
<p>The final package that is used in your built .apk’s manifest, and is the package your app is known as on your device and in the Google Play store, is the “application id”.</p>
<p>The package that is used in your source code to refer to your R class, and to resolve any relative activity/service registrations, continues to be called the “package”.</p>
</blockquote>
<p><strong>补充</strong>：<a href="http://tools.android.com/tech-docs/new-build-system/applicationid-vs-packagename" target="_blank" rel="external">ApplicationId versus PackageName</a></p>
<h1 id="替换-AndroidManifest-xml-中的属性"><a href="#替换-AndroidManifest-xml-中的属性" class="headerlink" title="替换 AndroidManifest.xml 中的属性"></a>替换 AndroidManifest.xml 中的属性</h1><p>这里可以参考友盟统计 SDK 中使用的方案。该方案通过在 AndroidManifest.xml 文件中 <code>application</code> 标签下指定 <code>&lt;mate-data&gt;</code> 设置占位符来实现动态替换属性值。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"UMENG_CHANNEL"</span> <span class="attr">android:value</span>=<span class="string">"$&#123;UMENG_CHANNEL&#125;"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>占位符形如<code>${name}</code>，在最终执行 AndroidManifest.xml 文件合并的时候，占位符会被 build.gradle 中对应值取代。 build.gradle 的配置需要用到上节讲到的 productFlavors 的 <code>manifestPlaceholders</code> 属性， <code>manifestPlaceholders</code> 属性直译过来就是<em>清单文件占位符</em>。</p>
<p>下面是 <code>build.gradle</code> 的节选代码：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">productFlavors &#123;</div><div class="line"></div><div class="line">   <span class="comment">//将 AndroidManifest.xml 文件中的 $&#123;UMENG_CHANNEL&#125; 替换为 default</span></div><div class="line">   flavors_default &#123;</div><div class="line">       manifestPlaceholders = [UMENG_CHANNEL: <span class="string">"defalut"</span>]</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   flavors_dev &#123;</div><div class="line">       applicationId <span class="string">"com.littlejie.multichannel.dev"</span></div><div class="line">       manifestPlaceholders = [UMENG_CHANNEL: <span class="string">"dev"</span>]</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   flavors_release &#123;</div><div class="line">       applicationId <span class="string">"com.littlejie.multichannel.release"</span></div><div class="line">       manifestPlaceholders = [UMENG_CHANNEL: <span class="string">"release"</span>]</div><div class="line">   &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你要替换多个属性，则只需要将 <code>manifestPlaceholders</code> 的写法如下：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">manifestPlaceholders = [VALUE_NAME1 : <span class="string">"value"</span> , VALUE_NAME2 : <span class="string">"value"</span>]</div></pre></td></tr></table></figure>
<p><strong>补充</strong>：关于 AndroidManifest 文件合并规则可以查看 <a href="http://tools.android.com/tech-docs/new-build-system/user-guide/manifest-merger" target="_blank" rel="external">官方文档</a></p>
<h1 id="替换资源文件"><a href="#替换资源文件" class="headerlink" title="替换资源文件"></a>替换资源文件</h1><p>多渠道打包的时候可能会碰到这种情况：每个应用市场的启动页图标、应用名称可能会有点小出入，更有甚者，连布局都不一样。这时候我们该怎么办呢？</p>
<p>有一种解决办法就是：在代码里进行判断，根据渠道的不一样，加载不同的图片和布局，这是一种解决办法。但是当渠道有很多时，代码就会变得很难维护，而且指定渠道用到的资源文件都会被打入所有 Apk 中。所以这个方法并不值得推荐。那么，有什么好的解决办法呢？</p>
<p>办法 Google 早就给我们想好了，而且相当简单，那就是：<strong>在 main 的同级目录下创建以渠道名命名的文件夹，然后创建资源文件（路径要与 main 中的一致），然后打包的时候 gradle 就会自己替换或者合并资源。</strong></p>
<p>例如， App 的默认 icon 路径为 <code>main\res\mipmap-hdpi\ic_launcher.png</code> ，那么 flavors_dev的路径就为 <code>flavors_dev\res\mipmap-hdpi\ic_launcher.png</code> ，打包 flavors_dev 渠道的时候会自动替换图片。</p>
<p>对于资源合并，如果在 main 下的 strings.xml 内容为：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>MultiChannel<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"string_merge"</span>&gt;</span>我是string,我暂时没被合并<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在 flavors_dev 下的 strings.xml 内容为：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"string_merge"</span>&gt;</span>我是dev_string,我会把string合并<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当打 flavors_dev 渠道包时，最终 strings.xml 会变成：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>MultiChannel<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"string_merge"</span>&gt;</span>我是dev_string,我会把string合并<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>以上特性可以用来<strong>替换 Apk 的应用名称和应用图标</strong>，这比使用前面讲到的占位符方便很多。同理，替换图片和合并颜色的原理也相似。</p>
<h1 id="多渠道使用独立签名"><a href="#多渠道使用独立签名" class="headerlink" title="多渠道使用独立签名"></a>多渠道使用独立签名</h1><p>多渠道打包的时候，可能每个渠道包的签名都必须不一样，真正做到定制化，那么，怎么实现每个渠道包使用指定的签名呢？</p>
<p>平时我们打包的时候是这样的：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">signingConfigs &#123;</div><div class="line">   release &#123;</div><div class="line">       storeFile <span class="keyword">file</span>(<span class="string">"签名文件路径"</span>)</div><div class="line">       storePassword <span class="string">"storePassword"</span></div><div class="line">       keyAlias <span class="string">"keyAlias"</span></div><div class="line">       keyPassword <span class="string">"keyPassword"</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">buildTypes &#123;</div><div class="line">   release &#123;</div><div class="line">       minifyEnabled <span class="keyword">true</span></div><div class="line">       proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></div><div class="line">       shrinkResources <span class="keyword">true</span></div><div class="line">       <span class="comment">//指定打 release 包时使用的签名文件</span></div><div class="line">       signingConfig signingConfigs.release</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="comment">//如果 debug 包需要测试诸如微信、地图等第三方 sdk ，则可以指定 debug 包使用 release 包的签名</span></div><div class="line">   <span class="comment">//debug &#123;</span></div><div class="line">   <span class="comment">//    signingConfig signingConfigs.release</span></div><div class="line">   <span class="comment">//&#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而给每个渠道包指定签名其实也差不多。</p>
<p>Google 官方原话：</p>
<blockquote>
<p>This enables either having all release packages share the same SigningConfig, by setting android.buildTypes.release.signingConfig, or have each release package use their own SigningConfig by setting each android.productFlavors.*.signingConfig objects separately.</p>
</blockquote>
<p>大意就是，在 buildType 下指定签名的具体属性，形如 <code>android.productFlavors.*.signingConfig signingConfigs.*</code> ，前一个 <code>*</code> 指代在 productFlavors 中定义的 flavor ，后一个 <code>*</code> 指代在 signingConfigs 定义的属性。值得注意的是，signingConfigs 必须定义在 buildType 之前。</p>
<p>以下是 build.gradle 的配置节选：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义签名属性</span></div><div class="line">signingConfigs &#123;</div><div class="line">   flavors_default &#123;</div><div class="line">       <span class="comment">//如果签名文件在项目的根目录下,则可以这么写</span></div><div class="line">       storeFile <span class="keyword">file</span>(<span class="string">"../littlejie.jks"</span>)</div><div class="line">       storePassword <span class="string">"******"</span></div><div class="line">       keyAlias <span class="string">"******"</span></div><div class="line">       keyPassword <span class="string">"*****"</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   flavors_dev &#123;</div><div class="line">       storeFile <span class="keyword">file</span>(<span class="string">"../littlejie_dev.jks"</span>)</div><div class="line">       storePassword <span class="string">"*****"</span></div><div class="line">       keyAlias <span class="string">"*****"</span></div><div class="line">       keyPassword <span class="string">"*****"</span></div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">buildTypes &#123;</div><div class="line">   release &#123;</div><div class="line">       minifyEnabled <span class="keyword">true</span></div><div class="line">       proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></div><div class="line">       shrinkResources <span class="keyword">true</span></div><div class="line"></div><div class="line">       <span class="comment">//多个 flavor ,指定 flavor 使用指定 签名</span></div><div class="line">       productFlavors.flavors_default.signingConfig signingConfigs.flavors_default</div><div class="line">       productFlavors.flavors_dev.signingConfig signingConfigs.flavors_dev</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="comment">//如果 debug 包需要测试诸如微信、地图等第三方 sdk ，则可以指定 debug 包使用 release 包的签名</span></div><div class="line">   <span class="comment">//debug 并不能设置多个签名</span></div><div class="line">   <span class="comment">//debug &#123;</span></div><div class="line">   <span class="comment">//   productFlavors.flavors_default.signingConfig signingConfigs.flavors_default</span></div><div class="line">   <span class="comment">//   productFlavors.flavors_dev.signingConfig signingConfigs.flavors_dev</span></div><div class="line">   <span class="comment">//&#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我们来验证下生成的包的签名是否正确，查看签名我们会用到如下两个命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//查看签名文件的属性</div><div class="line">keytool -list -keystore 签名文件</div><div class="line"></div><div class="line">//查看 apk 的签名，需要提前解压 apk ，获取 CERT.RSA（位于解压目录下 /META-INF 下）</div><div class="line">//以下命令行是在 apk 解压目录下执行</div><div class="line">keytool -printcert -file META-INF/CERT.RSA</div></pre></td></tr></table></figure>
<p>更多 keytool 命令使用可以查看 <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html" target="_blank" rel="external">官方文档</a></p>
<p>首先，我们来看下 littlejie.jks 的信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">lishengjiedeMacBook-Pro:AndroidDemo littlejie$ keytool -list -keystore littlejie.jks</div><div class="line">输入密钥库口令:</div><div class="line"></div><div class="line">密钥库类型: JKS</div><div class="line">密钥库提供方: SUN</div><div class="line"></div><div class="line">您的密钥库包含 1 个条目</div><div class="line"></div><div class="line">littlejie, 2016-9-18, PrivateKeyEntry,</div><div class="line">证书指纹 (SHA1): A2:B1:BF:BF:F1:F3:26:F4:FD:0C:94:95:B5:32:90:69:24:F7:99:84</div></pre></td></tr></table></figure>
<p>解压 multichannel-flavors_default-release.apk ，查看 CERT.RSA 信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">lishengjiedeMacBook-Pro:apk littlejie$ keytool -printcert -file multichannel-flavors_default-release/META-INF/CERT.RSA</div><div class="line">所有者: CN=littlejie</div><div class="line">发布者: CN=littlejie</div><div class="line">序列号: 71693e05</div><div class="line">有效期开始日期: Sun Sep 18 17:20:34 CST 2016, 截止日期: Thu Sep 12 17:20:34 CST 2041</div><div class="line">证书指纹:</div><div class="line">	 MD5: AC:12:83:51:44:FC:82:68:8B:23:7B:E9:12:24:AE:52</div><div class="line">	 SHA1: A2:B1:BF:BF:F1:F3:26:F4:FD:0C:94:95:B5:32:90:69:24:F7:99:84</div><div class="line">	 SHA256: AD:04:19:5F:92:00:0D:FA:7C:E5:8A:12:57:72:4C:1E:0E:2E:FC:0D:92:28:05:D0:CC:42:FC:93:95:44:88:88</div><div class="line">	 签名算法名称: SHA256withRSA</div><div class="line">	 版本: 3</div></pre></td></tr></table></figure>
<p>可以发现两者的 SHA1 值是相等的。</p>
<p>同理，可以查看 littlejie_dev.jks 和 multichannel-flavors_dev-release.apk 的签名信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">//littlejie_dev.jks 的签名信息</div><div class="line">lishengjiedeMacBook-Pro:AndroidDemo littlejie$ keytool -list -keystore littlejie_dev.jks</div><div class="line">输入密钥库口令:</div><div class="line"></div><div class="line">密钥库类型: JKS</div><div class="line">密钥库提供方: SUN</div><div class="line"></div><div class="line">您的密钥库包含 1 个条目</div><div class="line"></div><div class="line">littlejie, 2016-9-18, PrivateKeyEntry,</div><div class="line">证书指纹 (SHA1): B4:25:67:A5:9F:8C:1F:12:BD:85:6B:2D:FE:71:62:57:8A:CC:AE:E2</div><div class="line"></div><div class="line">//multichannel-flavors_dev-release.apk 的签名信息</div><div class="line">lishengjiedeMacBook-Pro:apk littlejie$ keytool -printcert -file multichannel-flavors_dev-release/META-INF/CERT.RSA</div><div class="line">所有者: CN=littlejie</div><div class="line">发布者: CN=littlejie</div><div class="line">序列号: 48346e15</div><div class="line">有效期开始日期: Sun Sep 18 17:21:23 CST 2016, 截止日期: Thu Sep 12 17:21:23 CST 2041</div><div class="line">证书指纹:</div><div class="line">	 MD5: 15:E9:E1:67:AB:33:8B:04:A4:C3:D0:05:8F:A6:35:37</div><div class="line">	 SHA1: B4:25:67:A5:9F:8C:1F:12:BD:85:6B:2D:FE:71:62:57:8A:CC:AE:E2</div><div class="line">	 SHA256: 96:A5:14:EC:28:25:32:0D:3E:D0:DB:D0:84:06:E7:9C:17:D7:91:83:A4:51:93:AB:34:3E:D9:FD:C5:FA:A1:8E</div><div class="line">	 签名算法名称: SHA256withRSA</div><div class="line">	 版本: 3</div></pre></td></tr></table></figure>
<p>但是这里有个问题，就是这种给某个 flavor 指定签名的方法对 debug 无效，有兴趣的同学可以看上述注释掉的 debug 签名部分配置。简单来说，debug 签名只能指定一个或者使用默认的 debug 签名。</p>
<p>若哪位大神有解决方案，欢迎指出~</p>
<p>这里再做几点补充：</p>
<ol>
<li>多渠道使用独立签名，<strong>打包时千万不要使用 Android Studio 中 Build 菜单下的 Generate Signed APK</strong>，因为当你使用这个打包的时候， Android Studio 会让你指定使用的签名文件， so 你就等着哭吧~楼主因为这个折腾了半天。解决方法就是使用 gradle tasks。传送门：<a href="http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Android-tasks" target="_blank" rel="external">Android Gradle Build Tasks</a></li>
<li>鉴于第一点中的传送门需要翻墙，所以在这里简单介绍一下 <a href="http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Android-tasks" target="_blank" rel="external">Android Gradle Build Tasks</a> 的使用。<ul>
<li>打全部包： <code>gradle assemble</code></li>
<li>打全部 Debug 包： <code>gradle assembleDebug</code> ，可以简写为 <code>gradle aD</code> ，前提是没有相同缩写的参数</li>
<li>打全部 Release 包： <code>gradle assembleRelease</code>，可以简写为 <code>gradle aR</code></li>
<li>打指定 flavor 包： <code>gradle assemble(flavor)(Debug|Release)</code></li>
<li>打包完成后安装（设备上没有安装该 apk ，否则会失败，而且只能指定 flavor ，不然也会失败）： <code>gradle install(flavor)（Debug|Release）</code></li>
<li>打包前先 clean 一下(在测试的时候很必要，如果不 clean 的话，可能会导致某些小修改不会及时打入新包)： <code>gradle clean assembleDebug</code></li>
</ul>
</li>
</ol>
<h1 id="利用-Gradle-修改构建版本号"><a href="#利用-Gradle-修改构建版本号" class="headerlink" title="利用 Gradle 修改构建版本号"></a>利用 Gradle 修改构建版本号</h1><p>楼主表示对 Groovy 不是很熟，所以利用 Gradle 自动修改构建版本这个就先留着，我先去研究几天~</p>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>有童鞋在评论中说：使用 productFlavors 打包效率太低，的确是这样， gradle 好用是好用，就是打包效率低。如果只是单纯生成渠道包，建议使用<a href="http://tech.meituan.com/mt-apk-packaging.html" target="_blank" rel="external">美团多渠道打包方案</a>，另外 360 加固也是一种不错的选择，效率都比使用 gradle 来的高。但如果需要替换 Apk 中的图片、字符串、应用的 applicationId 、给指定渠道的包使用指定的签名，那么只能乖乖使用 gradle 打包了，慢你也得忍着~</p>
<p>之前刚开始调研的时候，发现 Github 上有个 <a href="https://github.com/SSOOnline/ApkCustomizationTool" target="_blank" rel="external">ApkCustomizationTool</a> 项目，它是通过对 Apk 解包，替换图片、字符串，然后重新签名，不过这毕竟是事后诸葛亮，控制在打包的源头总是毕竟好的，有兴趣的同学可以去研究下。</p>
<p>不知大家有没有这种感受，每次发版上传渠道的时候想死有没有？o(╯□╰)o</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是自己在使用 Gradle 实现 Android 多渠道打包时碰到的问题， Android 官方关于使用 Gradle 的<a href="http://tools.android.com/tech-docs/new-build-system/user-guide" target="_blank" rel="external">文档</a>已经很详细了，自己总结的只是一点皮毛，有时间要去自习研读下。</p>
<p>工作一年多，愣是没有写博客做总结，好多东西都是用过就忘，下次要用再找，没有成体系的 Android 知识结构，对工资不满意，可就连想跳槽面试都没底气。这次写这篇博客画了思维导图，自以为逻辑清晰了，可是真正要把这些东西讲述清楚，还真是一件麻烦的事~看来，自己还有很长的路要走~</p>
<p>这段时间自己也在思考，是转行还是去考事业编制，还是继续做 Android。转行，除了编程自己好像别的什么也不会，当然自己编程也做的不怎么好。考事业编制，这个可以考虑，毕竟再很多人眼里这是个旱涝保收的职业。继续做 Android ，这个也不错，除了每次都花大把时间用来改 UI，别的都还不错（吐槽产品）。</p>
<p>话说，有没有什么工作，自由、上班时间少、工资高的？当然没有，至少现阶段的自己是接触不到的，所以，骚年，还是努力吧！多读书、多看报、多运动，少吃零食多睡觉~</p>
<p>恩，算是对工作一年多的总结也是吐槽~</p>
<blockquote>
<p>读万卷书，行万里路~</p>
</blockquote>
<p><strong>参考</strong>：</p>
<ol>
<li><a href="http://tools.android.com/tech-docs/new-build-system/user-guide" target="_blank" rel="external">Gradle Plugin User Guide</a></li>
<li><a href="http://google.github.io/android-gradle-dsl/current/" target="_blank" rel="external">Android Plugin DSL Reference</a></li>
<li><a href="http://unclechen.github.io/2015/10/22/Android-Studio-Gradle%E5%AE%9E%E8%B7%B5%E4%B9%8B%E5%A4%9A%E6%B8%A0%E9%81%93%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85+%E7%89%88%E6%9C%AC%E5%8F%B7%E7%AE%A1%E7%90%86/" target="_blank" rel="external">Android Studio Gradle实践之多渠道自动化打包+版本号管理</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;版权声明：本文为博主原创文章，未经博主允许不得转载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近在项目中遇到需要实现 Apk 多渠道、定制化打包， Google 、百度查找了一些资料，成功实现了上述功能，在此记录以备不时之需，温故而知新，可以为
    
    </summary>
    
      <category term="Android" scheme="http://www.littlejie.com/categories/Android/"/>
    
      <category term="Gradle" scheme="http://www.littlejie.com/categories/Android/Gradle/"/>
    
    
      <category term="Android" scheme="http://www.littlejie.com/tags/Android/"/>
    
      <category term="Gradle" scheme="http://www.littlejie.com/tags/Gradle/"/>
    
      <category term="多渠道打包" scheme="http://www.littlejie.com/tags/%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
</feed>
