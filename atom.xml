<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>厉圣杰的博客</title>
  <subtitle>啦啦啦，德玛西亚</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.littlejie.com/"/>
  <updated>2017-03-13T04:58:58.000Z</updated>
  <id>http://www.littlejie.com/</id>
  
  <author>
    <name>厉圣杰</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于Material Design的Gank IO客户端</title>
    <link href="http://www.littlejie.com/2017/03/13/%E5%9F%BA%E4%BA%8EMaterial-Design%E7%9A%84Gank-IO%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>http://www.littlejie.com/2017/03/13/基于Material-Design的Gank-IO客户端/</id>
    <published>2017-03-13T04:58:03.000Z</published>
    <updated>2017-03-13T04:58:58.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>版权声明：本文为博主原创文章，未经博主允许不得转载。<br>微博：<a href="http://weibo.com/2952381050/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo" target="_blank" rel="external">厉圣杰</a><br>源码：<a href="https://github.com/MyLifeMyTravel/GankIO" target="_blank" rel="external">GankIO</a><br><strong>文中如有纰漏，欢迎大家留言指出。</strong></p>
</blockquote>
<p>据说去年 RxJava + Retrofit 很火，但是自己一直没有接触，周末闲来无事，使用 MVP + RxJava + Retrofit + ButterKnife 写了一个简单的基于 <a href="http://gank.io/" target="_blank" rel="external">GankIO</a> 提供的 API 的 Material Design 的客户端。</p>
<p>先上个效果图：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://odsdowehg.bkt.clouddn.com/gank.gif" alt="gank" title="">
                </div>
                <div class="image-caption">gank</div>
            </figure></p>
<p>简单说下项目架构，项目分为 <strong>core</strong> 和 <strong>app</strong> 两个 module。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://odsdowehg.bkt.clouddn.com/屏幕快照" alt="屏幕快照" title="">
                </div>
                <div class="image-caption">屏幕快照</div>
            </figure>
<p><strong>core</strong> 是无业务逻辑无关的库，包含一些基类，如：<code>BaseActivity</code>、<code>BaseFragment</code>等，这里封装好了 ButterKnife ，使用注解真的可以极大的加快开发效率。<br><code>BaseImage</code> 是临时封装 <code>ImageView</code> 和 <code>Glide</code> 的，封装的很差，待改进。</p>
<p><strong>app</strong> 是基于 GankIO 的客户端，设计到具体的业务逻辑，其项目结构大致如下：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://odsdowehg.bkt.clouddn.com/屏幕快照" alt="屏幕快照" title="">
                </div>
                <div class="image-caption">屏幕快照</div>
            </figure><br>其中，<code>modules</code> 包下是客户端的界面，由于界面不多，所以没有细分，<code>contract</code> 是 MVP 模式的契约类，具体可以参考 Google 开源的 MVP 项目：<a href="https://github.com/googlesamples/android-architecture" target="_blank" rel="external">android-architecture</a>。<code>presenter</code> 包下则是 P 层的实现，只涉及业务、数据，不涉及 UI ，UI 的操作全部封装在 V 层。</p>
<p>如果对 MVP 模式不是很理解，可以切换到 <code>master</code> 分支，<code>master</code> 分支使用传统的 Android 架构开发。</p>
<h2 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h2><ol>
<li>SwipeRefreshLayout 与 WebView 的滑动冲突</li>
<li>ViewPager 的状态保存</li>
</ol>
<p>项目写的比较匆忙，如有问题欢迎指出~</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;版权声明：本文为博主原创文章，未经博主允许不得转载。&lt;br&gt;微博：&lt;a href=&quot;http://weibo.com/2952381050/profile?rightmod=1&amp;amp;wvr=6&amp;amp;mod=personinfo&quot; targe
    
    </summary>
    
      <category term="Android" scheme="http://www.littlejie.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.littlejie.com/tags/Android/"/>
    
      <category term="Material Design" scheme="http://www.littlejie.com/tags/Material-Design/"/>
    
      <category term="RxJava" scheme="http://www.littlejie.com/tags/RxJava/"/>
    
      <category term="Retrofit" scheme="http://www.littlejie.com/tags/Retrofit/"/>
    
      <category term="ButterKnife" scheme="http://www.littlejie.com/tags/ButterKnife/"/>
    
      <category term="MVP" scheme="http://www.littlejie.com/tags/MVP/"/>
    
  </entry>
  
  <entry>
    <title>【译】如何在 Android 5.0 上获取 SD卡 的访问权限</title>
    <link href="http://www.littlejie.com/2017/03/11/%E3%80%90%E8%AF%91%E3%80%91%E5%A6%82%E4%BD%95%E5%9C%A8-Android-5-0-%E4%B8%8A%E8%8E%B7%E5%8F%96-SD%E5%8D%A1-%E7%9A%84%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/"/>
    <id>http://www.littlejie.com/2017/03/11/【译】如何在-Android-5-0-上获取-SD卡-的访问权限/</id>
    <published>2017-03-11T00:53:21.000Z</published>
    <updated>2017-03-11T00:53:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为最近项目需要，涉及到 SD卡 的读写操作，然而申请 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 读写权限 --&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.READ_EXTERNAL_STORAGE&quot;/&gt;</div><div class="line">&lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt;</div></pre></td></tr></table></figure>
<p>权限只能对 SD卡 进行读操作，而没有写权限，也就是说，Android 在某个版本中对 SD卡 的读写权限进行了限制。后在 StackoverFlow 上找到一篇相关问答，解了心中疑惑。在此，对该问答进行翻译并附上相关 Demo，已做备忘。</p>
<p>原文地址：<a href="http://stackoverflow.com/questions/26744842/how-to-use-the-new-sd-card-access-api-presented-for-android-5-0-lollipop" target="_blank" rel="external">How to use the new SD card access API presented for Android 5.0 (Lollipop)?</a></p>
<h2 id="问"><a href="#问" class="headerlink" title="问"></a>问</h2><h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在 Android 4.4(KitKat) 中，Google 对 SD卡 的访问已经做了严格的限制。<br>在 Android 5.0(Lollipop) 中，开发者可以使用 新API 要求用户对某个指定的文件夹进行访问授权，详见：<a href="https://code.google.com/p/android/issues/detail?id=67570#c4444" target="_blank" rel="external">Android 4.4 Samsung Galaxy s4 external sd card is now read only, Remove or option to edit non app files.</a>(译者注：开头挺搞笑的，都是开发者吐槽 Google 对 SD卡 做了限制)</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>上述文章中有两个链接：</p>
<ol>
<li><p><a href="https://android.googlesource.com/platform/development/+/android-5.0.0_r2/samples/Vault/src/com/example/android/vault/VaultProvider.java#258" target="_blank" rel="external">https://android.googlesource.com/platform/development/+/android-5.0.0_r2/samples/Vault/src/com/example/android/vault/VaultProvider.java#258</a></p>
<p> 此链接中代码看起来更像是内部示例(可能会在以后的 API Demo 中出现)，但是真的很难理解这部分代码的意图。</p>
</li>
<li><p><a href="http://developer.android.com/reference/android/support/v4/provider/DocumentFile.html" target="_blank" rel="external">http://developer.android.com/reference/android/support/v4/provider/DocumentFile.html</a></p>
<p> 这是 新API 的官方文档，但是并没有多少如何使用的细节。(译者注：这份文档其实还是有很多内容的，后面会具体细讲。至于为什么会有这种差别，可能作者提问时，该文档尚未完善吧~)</p>
<blockquote>
<p>If you really do need full access to an entire subtree of documents, start by launching ACTION_OPEN_DOCUMENT_TREE to let the user pick a directory. Then pass the resulting getData() into fromTreeUri(Context, Uri) to start working with the user selected tree.<br>As you navigate the tree of DocumentFile instances, you can always use getUri() to obtain the Uri representing the underlying document for that object, for use with openInputStream(Uri), etc.<br>To simplify your code on devices running KITKAT or earlier, you can use fromFile(File) which emulates the behavior of a DocumentsProvider.</p>
</blockquote>
</li>
</ol>
<p>对于新 API 我有以下问题：</p>
<ol>
<li>新 API 的正确使用方式？</li>
<li>根据文档，系统会记录 app 被授予访问权限的文件和文件夹。那么，我该如何检测我对某个文件或者文件夹是否有访问权限？是否有方法获取可访问的文件或文件夹列表呢？</li>
<li>在 Android 4.4 上如何处理这个问题？Support Library 是否包含相应的解决方案</li>
<li>系统中是否有对应的界面可以查看哪些 App 可以访问哪些文件。</li>
<li>在多用户的设备上授权该如何处理？</li>
<li>是否有其它关于新 API 的文档？</li>
<li>对 SD卡 的授权是否可以被取消？如果是，那对应的意图是什么？</li>
<li>对于文件夹授权是否是递归授权？指代文件夹内还嵌套有文件夹。</li>
<li>SD 授权是否支持多选？或该应用程序需要专门告诉意图要允许的文件/文件夹吗？</li>
<li>模拟器可以测试新 API 嘛？我的意思是，模拟器具有 SD 卡的分区，但它的作用是主要的外部存储，简单使用 <code>android.permission.WRITE_EXTERNAL_STORAGE</code> 是否足够？</li>
<li>当用户替换 SD卡 是会发生什么？</li>
</ol>
<h2 id="来自-Jeff-Sharkey-的回答"><a href="#来自-Jeff-Sharkey-的回答" class="headerlink" title="来自 Jeff Sharkey 的回答"></a>来自 <a href="http://stackoverflow.com/users/256332/jeff-sharkey" target="_blank" rel="external">Jeff Sharkey</a> 的回答</h2><p>这些问题问的都非常好，让我们来深入挖掘下</p>
<h3 id="如何使用新的-API"><a href="#如何使用新的-API" class="headerlink" title="如何使用新的 API"></a>如何使用新的 API</h3><p>在 Kitkat 中有一份非常好的关于与 <code>Storage Access Framework</code> 交互的文档：<a href="https://developer.android.com/guide/topics/providers/document-provider.html#client" target="_blank" rel="external">Document provider</a>.</p>
<p>新 API 的使用与之很相似。通过发送以下 Intent ，让用户在文档树(<code>Directory Tree</code>)中选择授权目录。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_OPEN_DOCUMENT_TREE);</div><div class="line">startActivityForResult(intent, <span class="number">42</span>);</div></pre></td></tr></table></figure>
<p>在 <code>onActivityResult()</code> 中，将用户选择的 Uri 传递给辅助类 <code>DocumentFile</code>。以下代码片段展示了如何列出选中目录下的文件和如何创建一个文件。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent resultData)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (resultCode == RESULT_OK) &#123;</div><div class="line">        Uri treeUri = resultData.getData();</div><div class="line">        DocumentFile pickedDir = DocumentFile.fromTreeUri(<span class="keyword">this</span>, treeUri);</div><div class="line"></div><div class="line">        <span class="comment">// List all existing files inside picked directory</span></div><div class="line">        <span class="keyword">for</span> (DocumentFile file : pickedDir.listFiles()) &#123;</div><div class="line">            Log.d(TAG, <span class="string">"Found file "</span> + file.getName() + <span class="string">" with size "</span> + file.length());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Create a new file and write into it</span></div><div class="line">        DocumentFile newFile = pickedDir.createFile(<span class="string">"text/plain"</span>, <span class="string">"My Novel"</span>);</div><div class="line">        OutputStream out = getContentResolver().openOutputStream(newFile.getUri());</div><div class="line">        out.write(<span class="string">"A long time ago..."</span>.getBytes());</div><div class="line">        out.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由 <code>DocumentFile.getUri()</code> 返回的 Uri 使用非常灵活，可以与不同的 API 搭配使用。例如，你可以通过 <code>Inetnt.setData()</code> 将 Uri 分享出去，不过得将 Intent 的 flag 设置为 <code>Intent.FLAG_GRANT_READ_URI_PERMISSION</code>。</p>
<h3 id="如何检测是否对某个文件-文件夹有访问权限"><a href="#如何检测是否对某个文件-文件夹有访问权限" class="headerlink" title="如何检测是否对某个文件/文件夹有访问权限"></a>如何检测是否对某个文件/文件夹有访问权限</h3><p>默认情况下，通过 <code>Storage Access Framework</code> 获取的 Uri 授权并不是永久的，设备重启后就会消失。不过，系统提供了相关的接口让授权永久化，如果需要的话可自行设置。在上述代码，你可以如此设置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">getContentResolver().takePersistableUriPermission(treeUri,</div><div class="line">            Intent.FLAG_GRANT_READ_URI_PERMISSION |</div><div class="line">            Intent.FLAG_GRANT_WRITE_URI_PERMISSION);</div></pre></td></tr></table></figure>
<p>之后，你就可以通过 <code>ContentResolver.getPersistedUriPermissions()</code> 来获取 APP 已经被永久授予权限的 Uri。如果不在需要某个 Uri 的权限，可以通过 <code>ContentResolver.releasePersistableUriPermission()</code> 来释放。</p>
<h3 id="能否在-Kitkat-中使用"><a href="#能否在-Kitkat-中使用" class="headerlink" title="能否在 Kitkat 中使用"></a>能否在 Kitkat 中使用</h3><p>不能，因为该 API 是在 Lollipop 中添加的</p>
<h3 id="能否知道有哪些-APP-拥有该权限"><a href="#能否知道有哪些-APP-拥有该权限" class="headerlink" title="能否知道有哪些 APP 拥有该权限"></a>能否知道有哪些 APP 拥有该权限</h3><p>能。但是目前是没有 UI 界面的，你得通过 <code>adb shell dumpsys activity providers</code> 来获取。</p>
<h3 id="在多用户的设备上授权该如何处理？"><a href="#在多用户的设备上授权该如何处理？" class="headerlink" title="在多用户的设备上授权该如何处理？"></a>在多用户的设备上授权该如何处理？</h3><p>与多用户系统的其它功能一样，Uri 授权也是用户独立的。因此，同一个 APP 的 Uri 授权对每个用户是透明的。</p>
<h3 id="授权是否可以被取消？"><a href="#授权是否可以被取消？" class="headerlink" title="授权是否可以被取消？"></a>授权是否可以被取消？</h3><p>DocumentProvider 支持随时撤销授权。取消授权最常见的方法就是通过上面提到 <code>ContentResolver.releasePersistableUriPermission()</code> 。</p>
<p>当清除应用的数据时，应用相关的授权也都会被清除。</p>
<h3 id="对于文件夹授权是否是递归授权的？"><a href="#对于文件夹授权是否是递归授权的？" class="headerlink" title="对于文件夹授权是否是递归授权的？"></a>对于文件夹授权是否是递归授权的？</h3><p>是的，通过 <code>ACTION_OPEN_DOCUMENT_TREE</code> 的 Intent 获取到授权之后，对该 Uri 下的所有文件都有读写权限。</p>
<h3 id="授权是否支持多选操作？"><a href="#授权是否支持多选操作？" class="headerlink" title="授权是否支持多选操作？"></a>授权是否支持多选操作？</h3><p>从 Android 4.4(Kitkat) 起就支持了。您可以在启动 <code>ACTION_OPEN_DOCUMENT</code> Intent 时通过设置 <code>EXTRA_ALLOW_MULTIPLE</code> 来实现。您可以通过使用 <code>Intent.setType()</code> 或者 <code>EXTRA_MIME_TYPES</code> 来设置可选文件类型。具体参考：<a href="http://developer.android.com/reference/android/content/Intent.html#ACTION_OPEN_DOCUMENT" target="_blank" rel="external">ACTION_OPEN_DOCUMENT</a></p>
<h3 id="是否可以在模拟器上尝试新-API"><a href="#是否可以在模拟器上尝试新-API" class="headerlink" title="是否可以在模拟器上尝试新 API"></a>是否可以在模拟器上尝试新 API</h3><p>可以的。如果你的 APP 只使用 <code>Storage Access Framework</code> 访问共享存储，你甚至不再需要 <code>READ/WRITE_EXTERNAL_STORAGE</code> 权限或者使用 <code>android:maxSdkVersion</code> 在较旧的版本上使用它们。</p>
<h3 id="当用户替换-SD卡-时会发生什么？"><a href="#当用户替换-SD卡-时会发生什么？" class="headerlink" title="当用户替换 SD卡 时会发生什么？"></a>当用户替换 SD卡 时会发生什么？</h3><p>当涉及物理介质时，底层媒体的 UUID（例如FAT序列号）总是被烧录到返回的 Uri 中。The system uses this to connect you to the media that the user originally selected, even if the user swaps the media around between multiple slots.(翻译不了)</p>
<p>如果用户替换了新的 SD卡，您需要重新申请 SD卡 授权。 由于系统会记住基于每个UUID的授权，如果用户以后重新插入，您将继续先前授予对原始卡的访问权限。</p>
<p>参考：<a href="http://en.wikipedia.org/wiki/Volume_serial_number" target="_blank" rel="external">磁盘序列号</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为最近项目需要，涉及到 SD卡 的读写操作，然而申请 &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;
    
    </summary>
    
      <category term="Android" scheme="http://www.littlejie.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.littlejie.com/tags/Android/"/>
    
      <category term="SD卡" scheme="http://www.littlejie.com/tags/SD%E5%8D%A1/"/>
    
      <category term="存储" scheme="http://www.littlejie.com/tags/%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>Android 自定义View之圆形进度条总结</title>
    <link href="http://www.littlejie.com/2017/03/02/Android-%E8%87%AA%E5%AE%9A%E4%B9%89View%E4%B9%8B%E5%9C%86%E5%BD%A2%E8%BF%9B%E5%BA%A6%E6%9D%A1%E6%80%BB%E7%BB%93/"/>
    <id>http://www.littlejie.com/2017/03/02/Android-自定义View之圆形进度条总结/</id>
    <published>2017-03-02T14:39:18.000Z</published>
    <updated>2017-03-02T14:40:05.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>版权声明：本文为博主原创文章，未经博主允许不得转载。<br>微博：<a href="http://weibo.com/2952381050/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo" target="_blank" rel="external">厉圣杰</a><br>微信公众号：牙锅子<br>源码：<a href="https://github.com/MyLifeMyTravel/CircleProgress" target="_blank" rel="external">CircleProgress</a><br><strong>文中如有纰漏，欢迎大家留言指出。</strong></p>
</blockquote>
<p>最近撸了一个圆形进度条的开源项目，算是第一次完完整整的使用自定义 View 。在此对项目开发思路做个小结，欢迎大家 <strong>Star 和 Fork</strong></p>
<p>该项目总共实现了三种圆形进度条效果</p>
<ol>
<li>CircleProgress：圆形进度条，可以实现仿 QQ 健康计步器的效果，支持配置进度条背景色、宽度、起始角度，支持进度条渐变</li>
<li>DialProgress：类似 CircleProgress，但是支持刻度</li>
<li>WaveProgress：实现了水波纹效果的圆形进度条，不支持渐变和起始角度配置，如需此功能可参考 CircleProgress 自行实现。</li>
</ol>
<p>先上效果图，有图才好说。<br>CircleProgress 效果图<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://odsdowehg.bkt.clouddn.com/a.gif" alt="a" title="">
                </div>
                <div class="image-caption">a</div>
            </figure></p>
<p>DialProgress 和 WaveProgress 效果图<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://odsdowehg.bkt.clouddn.com/b.gif" alt="b" title="">
                </div>
                <div class="image-caption">b</div>
            </figure></p>
<p>恩，那么接下来，就来讲讲怎么实现以上自定义进度条的效果。</p>
<h2 id="圆形进度条"><a href="#圆形进度条" class="headerlink" title="圆形进度条"></a>圆形进度条</h2><p>圆形进度条是第一个实现的进度条效果，用了我大半天的时间，实现起来并不复杂。</p>
<p>其思路主要可以分为以下几步：</p>
<ol>
<li>View 的测量</li>
<li>计算绘制 View 所需参数</li>
<li>圆弧的绘制及渐变的实现</li>
<li>文字的绘制</li>
<li>动画效果的实现</li>
</ol>
<p>首先，我们要测量出所绘制 View 的大小，即重写 <code>onMeasure()</code> 方法，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">   <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">   setMeasuredDimension(MiscUtil.measure(widthMeasureSpec, mDefaultSize),</div><div class="line">           MiscUtil.measure(heightMeasureSpec, mDefaultSize));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于其他两个进度条类都需要实现 View 的测量，这里对代码进行了封装：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 测量 View</div><div class="line">*</div><div class="line">* <span class="doctag">@param</span> measureSpec</div><div class="line">* <span class="doctag">@param</span> defaultSize View 的默认大小</div><div class="line">* <span class="doctag">@return</span> 测量出来的 View 大小</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">measure</span><span class="params">(<span class="keyword">int</span> measureSpec, <span class="keyword">int</span> defaultSize)</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> result = defaultSize;</div><div class="line">   <span class="keyword">int</span> specMode = View.MeasureSpec.getMode(measureSpec);</div><div class="line">   <span class="keyword">int</span> specSize = View.MeasureSpec.getSize(measureSpec);</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (specMode == View.MeasureSpec.EXACTLY) &#123;</div><div class="line">       result = specSize;</div><div class="line">   &#125; <span class="keyword">else</span> <span class="keyword">if</span> (specMode == View.MeasureSpec.AT_MOST) &#123;</div><div class="line">       result = Math.min(result, specSize);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于 View 测量可以看下这篇博客 <a href="http://blog.csdn.net/a739697044/article/details/30234161" target="_blank" rel="external">Android 自定义View 中的onMeasure的用法</a></p>
<p>接下来，在 <code>onSizeChanged()</code> 中计算绘制圆及文字所需的参数，考虑到屏幕旋转的情况，故未直接在 <code>onMeasure()</code> 方法中直接计算。这里以下面草图来讲解绘制计算过程中的注意事项，图丑，勿怪~<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://odsdowehg.bkt.clouddn.com/WechatIMG2.jpeg" alt="WechatIMG2" title="">
                </div>
                <div class="image-caption">WechatIMG2</div>
            </figure></p>
<p>图中，外面蓝色矩形为 View，里面黑色矩形为圆的外接矩形，蓝色矩形和黑色矩形中间空白的地方为 View 的内边距(padding)。两个蓝色的圆其实是一个圆，代表圆的粗细，这是因为 Android 在绘制圆或者圆弧的时候是圆的边宽的中心与外接矩形相交，所以在计算的时候要考虑到内边距(padding) 和 圆与外接矩形的相交。</p>
<p>默认不考虑圆弧的宽度，绘制出来的效果如下：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://odsdowehg.bkt.clouddn.com/device-2017-03-02-071101.png" alt="device-2017-03-02-071101" title="">
                </div>
                <div class="image-caption">device-2017-03-02-071101</div>
            </figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onSizeChanged</span><span class="params">(<span class="keyword">int</span> w, <span class="keyword">int</span> h, <span class="keyword">int</span> oldw, <span class="keyword">int</span> oldh)</span> </span>&#123;</div><div class="line">   <span class="keyword">super</span>.onSizeChanged(w, h, oldw, oldh);</div><div class="line">   Log.d(TAG, <span class="string">"onSizeChanged: w = "</span> + w + <span class="string">"; h = "</span> + h + <span class="string">"; oldw = "</span> + oldw + <span class="string">"; oldh = "</span> + oldh);</div><div class="line">   <span class="comment">//求圆弧和背景圆弧的最大宽度</span></div><div class="line">   <span class="keyword">float</span> maxArcWidth = Math.max(mArcWidth, mBgArcWidth);</div><div class="line">   <span class="comment">//求最小值作为实际值</span></div><div class="line">   <span class="keyword">int</span> minSize = Math.min(w - getPaddingLeft() - getPaddingRight() - <span class="number">2</span> * (<span class="keyword">int</span>) maxArcWidth,</div><div class="line">           h - getPaddingTop() - getPaddingBottom() - <span class="number">2</span> * (<span class="keyword">int</span>) maxArcWidth);</div><div class="line">   <span class="comment">//减去圆弧的宽度，否则会造成部分圆弧绘制在外围</span></div><div class="line">   mRadius = minSize / <span class="number">2</span>;</div><div class="line">   <span class="comment">//获取圆的相关参数</span></div><div class="line">   mCenterPoint.x = w / <span class="number">2</span>;</div><div class="line">   mCenterPoint.y = h / <span class="number">2</span>;</div><div class="line">   <span class="comment">//绘制圆弧的边界</span></div><div class="line">   mRectF.left = mCenterPoint.x - mRadius - maxArcWidth / <span class="number">2</span>;</div><div class="line">   mRectF.top = mCenterPoint.y - mRadius - maxArcWidth / <span class="number">2</span>;</div><div class="line">   mRectF.right = mCenterPoint.x + mRadius + maxArcWidth / <span class="number">2</span>;</div><div class="line">   mRectF.bottom = mCenterPoint.y + mRadius + maxArcWidth / <span class="number">2</span>;</div><div class="line">   <span class="comment">//计算文字绘制时的 baseline</span></div><div class="line">   <span class="comment">//由于文字的baseline、descent、ascent等属性只与textSize和typeface有关，所以此时可以直接计算</span></div><div class="line">   <span class="comment">//若value、hint、unit由同一个画笔绘制或者需要动态设置文字的大小，则需要在每次更新后再次计算</span></div><div class="line">   mValueOffset = mCenterPoint.y - (mValuePaint.descent() + mValuePaint.ascent()) / <span class="number">2</span>;</div><div class="line">   mHintOffset = mCenterPoint.y * <span class="number">2</span> / <span class="number">3</span> - (mHintPaint.descent() + mHintPaint.ascent()) / <span class="number">2</span>;</div><div class="line">   mUnitOffset = mCenterPoint.y * <span class="number">4</span> / <span class="number">3</span> - (mUnitPaint.descent() + mUnitPaint.ascent()) / <span class="number">2</span>;</div><div class="line">   updateArcPaint();</div><div class="line">   Log.d(TAG, <span class="string">"onSizeChanged: 控件大小 = "</span> + <span class="string">"("</span> + w + <span class="string">", "</span> + h + <span class="string">")"</span></div><div class="line">           + <span class="string">"圆心坐标 = "</span> + mCenterPoint.toString()</div><div class="line">           + <span class="string">";圆半径 = "</span> + mRadius</div><div class="line">           + <span class="string">";圆的外接矩形 = "</span> + mRectF.toString());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于 Android 中文字绘制可以参考以下两篇文章：</p>
<ol>
<li><a href="http://www.jianshu.com/p/1728b725b4a6" target="_blank" rel="external">Android 自定义View学习(三)——Paint 绘制文字属性</a></li>
<li><a href="http://stackoverflow.com/questions/7549182/android-paint-measuretext-vs-gettextbounds" target="_blank" rel="external">measureText() vs .getTextBounds()</a></li>
</ol>
<p>以上，已经基本完成了 View 绘制所需全部参数的计算。接下来就是绘制圆弧及文字了。</p>
<p>绘制圆弧需要用到 Canvas 的 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// oval 为 RectF 类型，即圆弧显示区域</span></div><div class="line"><span class="comment">// startAngle 和 sweepAngle  均为 float 类型，分别表示圆弧起始角度和圆弧度数。3点钟方向为0度，顺时针递增</span></div><div class="line"><span class="comment">// 如果 startAngle &lt; 0 或者 &gt; 360,则相当于 startAngle % 360</span></div><div class="line"><span class="comment">// useCenter:如果为 true 时，在绘制圆弧时将圆心包括在内，通常用来绘制扇形</span></div><div class="line"><span class="comment">// 绘制圆弧的画笔</span></div><div class="line">drawArc(RectF oval, <span class="keyword">float</span> startAngle, <span class="keyword">float</span> sweepAngle, <span class="keyword">boolean</span> useCenter, Paint paint);</div></pre></td></tr></table></figure>
<p>为了方便计算，绘制圆弧的时候使用了 Canvas 的 <code>rotate()</code> 方法，对坐标系进行了旋转</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawArc</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">   <span class="comment">// 绘制背景圆弧</span></div><div class="line">   <span class="comment">// 从进度圆弧结束的地方开始重新绘制，优化性能</span></div><div class="line">   canvas.save();</div><div class="line">   <span class="keyword">float</span> currentAngle = mSweepAngle * mPercent;</div><div class="line">   canvas.rotate(mStartAngle, mCenterPoint.x, mCenterPoint.y);</div><div class="line">   <span class="comment">// +2 是因为绘制的时候出现了圆弧起点有尾巴的问题</span></div><div class="line">   canvas.drawArc(mRectF, currentAngle, mSweepAngle - currentAngle + <span class="number">2</span>, <span class="keyword">false</span>, mBgArcPaint);</div><div class="line">   canvas.drawArc(mRectF, <span class="number">2</span>, currentAngle, <span class="keyword">false</span>, mArcPaint);</div><div class="line">   canvas.restore();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>恩，圆环已经绘制完成，那么接下来就是实现圆环的渐变，这里使用 <code>SweepGradient</code> 类。<code>SweepGradient</code> 可以实现从中心放射性渐变的效果，如下图：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://odsdowehg.bkt.clouddn.com/1344993412_1866.png" alt="1344993412_1866" title="">
                </div>
                <div class="image-caption">1344993412_1866</div>
            </figure></p>
<p><code>SweepGradient</code> 类有两个构造方法，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@param</span> cx 渲染中心点x坐标</div><div class="line"> * <span class="doctag">@param</span> cy 渲染中心点y坐标</div><div class="line"> * <span class="doctag">@param</span> colors 围绕中心渲染的颜色数组，至少要有两种颜色值</div><div class="line"> * <span class="doctag">@param</span> positions 相对位置的颜色数组,可为null,  若为null,可为null,颜色沿渐变线均匀分布。一般不需要设置该参数</div><div class="line"> /</div><div class="line">public SweepGradient(float cx, float cy, int[] colors, float[] positions)</div><div class="line"></div><div class="line">/**</div><div class="line"> * <span class="doctag">@param</span> cx 渲染中心点x坐标</div><div class="line"> * <span class="doctag">@param</span> cy 渲染中心点y坐标</div><div class="line"> * <span class="doctag">@param</span> color0 起始渲染颜色</div><div class="line"> * <span class="doctag">@param</span> color1 结束渲染颜色</div><div class="line"> /</div><div class="line">public SweepGradient(float cx, float cy, int color0, int color1)</div></pre></td></tr></table></figure>
<p>这里我们选择第一个构造方法。<strong>由于设置渐变需要每次都创建一个新的 <code>SweepGradient</code> 对象，所以最好不要放到 <code>onDraw</code> 方法中去更新，最好在初始化的时候就设置好，避免频繁创建导致内存抖动。</strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateArcPaint</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">// 设置渐变</span></div><div class="line">   <span class="keyword">int</span>[] mGradientColors = &#123;Color.GREEN, Color.YELLOW, Color.RED&#125;;</div><div class="line">   mSweepGradient = <span class="keyword">new</span> SweepGradient(mCenterPoint.x, mCenterPoint.y, mGradientColors, <span class="keyword">null</span>);</div><div class="line">   mArcPaint.setShader(mSweepGradient);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里还有一个值得注意的地方，草图如下<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://odsdowehg.bkt.clouddn.com/WechatIMG3.jpeg" alt="WechatIMG3" title="">
                </div>
                <div class="image-caption">WechatIMG3</div>
            </figure><br>假设，渐变颜色如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] mGradientColors = &#123;Color.GREEN, Color.YELLOW, Color.RED, Color.BLUE&#125;;</div></pre></td></tr></table></figure>
<p><strong>因为 <code>SweepGradient</code> 渐变是 360 度的，所以如果你绘制的圆弧只有 270度，则蓝色部分（图中黑色阴影部分）的渐变就会不可见。</strong></p>
<p>接下来，就是文字的绘制了。文字绘制在上述提到的文章中已经进行了详细的讲解，这里就不再赘述。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawText</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">   canvas.drawText(String.format(mPrecisionFormat, mValue), mCenterPoint.x, mValueOffset, mValuePaint);</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (mHint != <span class="keyword">null</span>) &#123;</div><div class="line">       canvas.drawText(mHint.toString(), mCenterPoint.x, mHintOffset, mHintPaint);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="keyword">if</span> (mUnit != <span class="keyword">null</span>) &#123;</div><div class="line">       canvas.drawText(mUnit.toString(), mCenterPoint.x, mUnitOffset, mUnitPaint);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最后，我们来实现进度条的动画效果。这里我们使用 Android 的属性动画来实现进度更新。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startAnimator</span><span class="params">(<span class="keyword">float</span> start, <span class="keyword">float</span> end, <span class="keyword">long</span> animTime)</span> </span>&#123;</div><div class="line">   mAnimator = ValueAnimator.ofFloat(start, end);</div><div class="line">   mAnimator.setDuration(animTime);</div><div class="line">   mAnimator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">       <span class="meta">@Override</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</div><div class="line">           mPercent = (<span class="keyword">float</span>) animation.getAnimatedValue();</div><div class="line">           mValue = mPercent * mMaxValue;</div><div class="line">           <span class="keyword">if</span> (BuildConfig.DEBUG) &#123;</div><div class="line">               Log.d(TAG, <span class="string">"onAnimationUpdate: percent = "</span> + mPercent</div><div class="line">                       + <span class="string">";currentAngle = "</span> + (mSweepAngle * mPercent)</div><div class="line">                       + <span class="string">";value = "</span> + mValue);</div><div class="line">           &#125;</div><div class="line">           invalidate();</div><div class="line">       &#125;</div><div class="line">   &#125;);</div><div class="line">   mAnimator.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里有两个注意点：</p>
<ol>
<li>不要在 <code>ValueAnimator.AnimatorUpdateListener</code> 中输出 Log，特别是动画调用频繁的情况下，因为输出 Log 频繁会生成大量 String 对象造成内存抖动，当然也可以使用 <code>StringBuilder</code> 来优化。</li>
<li>关于 <code>invalidate()</code> 和 <code>postInvalidate()</code> 两者最本质的前者只能在 UI 线程中使用，而后者可以在非 UI 线程中使用，其实 <code>postInvalidate()</code> 内部也是使用 Handler 实现的。</li>
</ol>
<p>关于 Android 属性动画可以参考：</p>
<ol>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/38067475/" target="_blank" rel="external">Android 属性动画（Property Animation） 完全解析 （上）</a></li>
<li><a href="http://blog.csdn.net/lmj623565791/article/details/38092093" target="_blank" rel="external">Android 属性动画（Property Animation） 完全解析 （下）</a></li>
</ol>
<h3 id="补充：同一个属性如何支持颜色和颜色数组"><a href="#补充：同一个属性如何支持颜色和颜色数组" class="headerlink" title="补充：同一个属性如何支持颜色和颜色数组"></a>补充：同一个属性如何支持颜色和颜色数组</h3><p>考虑到圆弧设置单色和渐变的区别，即单色只需要提供一种色值，而渐变至少需要提供两种色值。可以有以下几种解决方案：</p>
<ol>
<li>定义两个属性，渐变的优先级高于单色的。</li>
<li>定义一个 format 为 <code>string</code> 属性，以 <code>#FFFFFF|#000000</code> 形式提供色值</li>
<li>定义一个 format 为 <code>color|reference</code> 的属性，其中 <code>reference</code> 属性指代渐变色的数组。</li>
</ol>
<p>这里选用第三种方案，实现如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 圆形进度条 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"CircleProgressBar"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 圆弧颜色， --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"arcColors"</span> <span class="attr">format</span>=<span class="string">"color|reference"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- colors.xml --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"green"</span>&gt;</span>#00FF00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"blue"</span>&gt;</span>#EE9A00<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">color</span> <span class="attr">name</span>=<span class="string">"red"</span>&gt;</span>#EE0000<span class="tag">&lt;/<span class="name">color</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 渐变颜色数组 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">integer-array</span> <span class="attr">name</span>=<span class="string">"gradient_arc_color"</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">item</span>&gt;</span>@color/green<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">item</span>&gt;</span>@color/blue<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">item</span>&gt;</span>@color/red<span class="tag">&lt;/<span class="name">item</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">integer-array</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- 布局文件中使用 --&gt;</span></div><div class="line"><span class="comment">&lt;!-- 使用渐变 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">com.littlejie.circleprogress.DialProgress</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/dial_progress_bar"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"300dp"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"300dp"</span></div><div class="line">    <span class="attr">app:arcColors</span>=<span class="string">"@array/gradient_arc_color"</span> /&gt;</div><div class="line"><span class="comment">&lt;!-- 使用单色 --&gt;</span>    </div><div class="line"><span class="tag">&lt;<span class="name">com.littlejie.circleprogress.DialProgress</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/dial_progress_bar"</span></div><div class="line">    <span class="attr">android:layout_width</span>=<span class="string">"300dp"</span></div><div class="line">    <span class="attr">android:layout_height</span>=<span class="string">"300dp"</span></div><div class="line">    <span class="attr">app:arcColors</span>=<span class="string">"@color/green"</span> /&gt;</div></pre></td></tr></table></figure>
<p>代码中读取 xml 中配置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> gradientArcColors = typedArray.getResourceId(R.styleable.CircleProgressBar_arcColors, <span class="number">0</span>);</div><div class="line">   <span class="keyword">if</span> (gradientArcColors != <span class="number">0</span>) &#123;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           <span class="keyword">int</span>[] gradientColors = getResources().getIntArray(gradientArcColors);</div><div class="line">           <span class="keyword">if</span> (gradientColors.length == <span class="number">0</span>) &#123;<span class="comment">//如果渐变色为数组为0，则尝试以单色读取色值</span></div><div class="line">               <span class="keyword">int</span> color = getResources().getColor(gradientArcColors);</div><div class="line">               mGradientColors = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">               mGradientColors[<span class="number">0</span>] = color;</div><div class="line">               mGradientColors[<span class="number">1</span>] = color;</div><div class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (gradientColors.length == <span class="number">1</span>) &#123;<span class="comment">//如果渐变数组只有一种颜色，默认设为两种相同颜色</span></div><div class="line">               mGradientColors = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line">               mGradientColors[<span class="number">0</span>] = gradientColors[<span class="number">0</span>];</div><div class="line">               mGradientColors[<span class="number">1</span>] = gradientColors[<span class="number">0</span>];</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               mGradientColors = gradientColors;</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">catch</span> (Resources.NotFoundException e) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> Resources.NotFoundException(<span class="string">"the give resource not found."</span>);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h2 id="带刻度进度条"><a href="#带刻度进度条" class="headerlink" title="带刻度进度条"></a>带刻度进度条</h2><p>前面，详细讲了 CircleProgress 的绘制思路，接下来讲 DialProgress。</p>
<p>实话说，DialProgress 与 CircleProgress 的实现极其相似，因为两者之间其实就差了一个刻度，但考虑到扩展以及类职责的单一，所以将两者分开。</p>
<p>这里主要讲一下刻度的绘制。刻度绘制主要使用 Canvas 类的 <code>save()</code>、<code>rotate()</code>和<code>restore()</code> 方法，当然你也可以使用 <code>translate()</code> 方法对坐标系进行平移，方便计算。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 用来保存Canvas的状态。save之后，可以调用Canvas的平移、放缩、旋转、错切、裁剪等操作。</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 旋转一定的角度绘制图像</div><div class="line"> * @param degrees 旋转角度</div><div class="line"> * @param x 旋转中心点x轴坐标</div><div class="line"> * @param y 旋转中心点y轴坐标</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rotate</span><span class="params">(<span class="keyword">float</span> degrees, <span class="keyword">float</span> x, <span class="keyword">float</span> y)</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 在当前的坐标上平移(x,y)个像素单位</div><div class="line"> * 若dx &lt;0 ，沿x轴向上平移； dx &gt;0  沿x轴向下平移</div><div class="line"> * 若dy &lt;0 ，沿y轴向上平移； dy &gt;0  沿y轴向下平移</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">translate</span><span class="params">(<span class="keyword">float</span> dx, <span class="keyword">float</span> dy)</span></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 用来恢复Canvas之前保存的状态。防止save后对Canvas执行的操作对后续的绘制有影响。</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restore</span><span class="params">()</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawDial</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">   <span class="keyword">int</span> total = (<span class="keyword">int</span>) (mSweepAngle / mDialIntervalDegree);</div><div class="line">   canvas.save();</div><div class="line">   canvas.rotate(mStartAngle, mCenterPoint.x, mCenterPoint.y);</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= total; i++) &#123;</div><div class="line">       canvas.drawLine(mCenterPoint.x + mRadius, mCenterPoint.y, mCenterPoint.x + mRadius + mArcWidth, mCenterPoint.y, mDialPaint);</div><div class="line">       canvas.rotate(mDialIntervalDegree, mCenterPoint.x, mCenterPoint.y);</div><div class="line">   &#125;</div><div class="line">   canvas.restore();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>关于 Canvas 的画布操作可以参考这篇文章：<a href="http://blog.csdn.net/u013831257/article/details/50599912" target="_blank" rel="external">安卓自定义View进阶-Canvas之画布操作</a></p>
<h2 id="水波纹效果的进度条"><a href="#水波纹效果的进度条" class="headerlink" title="水波纹效果的进度条"></a>水波纹效果的进度条</h2><p>水波纹效果的进度条实现需要用到贝塞尔曲线，主要难点在于 <strong>绘制区域的计算</strong> 和 <strong>波浪效果</strong> 的实现，其余的逻辑跟上述两种进度条相似。</p>
<p>这里使用了 Path 类，该类在 Android 2D 绘图中是非常重要的，Path 不仅能够绘制简单图形，也可以绘制这些比较复杂的图形。也可以对多个路径进行布尔操作，类似设置 Paint 的 <code>setXfermode()</code> ，具体使用可以参考这篇博客：<a href="http://blog.csdn.net/u013831257/article/details/50784565" target="_blank" rel="external">安卓自定义View进阶-Path基本操作</a>。这里就不再赘述，有机会自己也会对 Android 自定义 View 的知识进行总结，不过，感觉应该了了无期。</p>
<p>继续上示意图，请叫我灵魂画手~<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://odsdowehg.bkt.clouddn.com/WechatIMG1.jpeg" alt="WechatIMG1" title="">
                </div>
                <div class="image-caption">WechatIMG1</div>
            </figure></p>
<p>图中黑色的圆为我们要绘制的进度条圆，黑色的曲线为初始状态的的波浪，该波浪使用贝塞尔曲线绘制，其中奇数的点为贝塞尔曲线的起始点，偶数的点为贝塞尔曲线的控制点。例如：1——&gt;2——&gt;3就为一条贝塞尔曲线，1 是起点，2 是控制点，3 是终点。从图中可以看到波浪在园内圆外各一个(1—&gt;5 和 5-&gt;9)，通过对波浪在 x 轴上做平移，即图中蓝色实线，来实现波浪的动态效果，所以一个波浪的完整动画效果需要有两个波浪来实现。同理，通过控制 y 轴的偏移量，即图中蓝色虚线，可以实现波浪随进度的上涨下降。</p>
<p>贝塞尔曲线上起始点和控制点的计算如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 计算贝塞尔曲线上的起始点和控制点</div><div class="line"> * <span class="doctag">@param</span> waveWidth 一个完整波浪的宽度</div><div class="line"> */</div><div class="line"><span class="keyword">private</span> Point[] getPoint(<span class="keyword">float</span> waveWidth) &#123;</div><div class="line">   Point[] points = <span class="keyword">new</span> Point[mAllPointCount];</div><div class="line">   <span class="comment">//第1个点特殊处理，即数组的中心</span></div><div class="line">   points[mHalfPointCount] = <span class="keyword">new</span> Point((<span class="keyword">int</span>) (mCenterPoint.x - mRadius), mCenterPoint.y);</div><div class="line">   <span class="comment">//屏幕内的贝塞尔曲线点</span></div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = mHalfPointCount + <span class="number">1</span>; i &lt; mAllPointCount; i += <span class="number">4</span>) &#123;</div><div class="line">       <span class="keyword">float</span> width = points[mHalfPointCount].x + waveWidth * (i / <span class="number">4</span> - mWaveNum);</div><div class="line">       points[i] = <span class="keyword">new</span> Point((<span class="keyword">int</span>) (waveWidth / <span class="number">4</span> + width), (<span class="keyword">int</span>) (mCenterPoint.y - mWaveHeight));</div><div class="line">       points[i + <span class="number">1</span>] = <span class="keyword">new</span> Point((<span class="keyword">int</span>) (waveWidth / <span class="number">2</span> + width), mCenterPoint.y);</div><div class="line">       points[i + <span class="number">2</span>] = <span class="keyword">new</span> Point((<span class="keyword">int</span>) (waveWidth * <span class="number">3</span> / <span class="number">4</span> + width), (<span class="keyword">int</span>) (mCenterPoint.y + mWaveHeight));</div><div class="line">       points[i + <span class="number">3</span>] = <span class="keyword">new</span> Point((<span class="keyword">int</span>) (waveWidth + width), mCenterPoint.y);</div><div class="line">   &#125;</div><div class="line">   <span class="comment">//屏幕外的贝塞尔曲线点</span></div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mHalfPointCount; i++) &#123;</div><div class="line">       <span class="keyword">int</span> reverse = mAllPointCount - i - <span class="number">1</span>;</div><div class="line">       points[i] = <span class="keyword">new</span> Point(points[mHalfPointCount].x - points[reverse].x,</div><div class="line">               points[mHalfPointCount].y * <span class="number">2</span> - points[reverse].y);</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">return</span> points;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上，我们已经获取到绘制贝塞尔曲线所需的路径点。接下来，我们就需要来计算出绘制区域，即使用 Path 类。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://odsdowehg.bkt.clouddn.com/WechatIMG1-1.jpeg" alt="WechatIMG1" title="">
                </div>
                <div class="image-caption">WechatIMG1</div>
            </figure>
<p>紫色区域为贝塞尔曲线需要绘制的整体区域。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://odsdowehg.bkt.clouddn.com/WechatIMG1-2.jpeg" alt="WechatIMG1" title="">
                </div>
                <div class="image-caption">WechatIMG1</div>
            </figure>
<p>红色区域为上图紫色区域与圆的交集，也就是波浪要显示的区域</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//该方法必须在 Android 19以上的版本才能使用(Path.op())</span></div><div class="line"><span class="meta">@TargetApi</span>(Build.VERSION_CODES.KITKAT)</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawWave</span><span class="params">(Canvas canvas, Paint paint, Point[] points, <span class="keyword">float</span> waveOffset)</span> </span>&#123;</div><div class="line">   mWaveLimitPath.reset();</div><div class="line">   mWavePath.reset();</div><div class="line">   <span class="comment">//lockWave 用于判断波浪是否随进度条上涨下降</span></div><div class="line">   <span class="keyword">float</span> height = lockWave ? <span class="number">0</span> : mRadius - <span class="number">2</span> * mRadius * mPercent;</div><div class="line">   <span class="comment">//moveTo和lineTo绘制出水波区域矩形</span></div><div class="line">   mWavePath.moveTo(points[<span class="number">0</span>].x + waveOffset, points[<span class="number">0</span>].y + height);</div><div class="line"></div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; mAllPointCount; i += <span class="number">2</span>) &#123;</div><div class="line">       mWavePath.quadTo(points[i].x + waveOffset, points[i].y + height,</div><div class="line">               points[i + <span class="number">1</span>].x + waveOffset, points[i + <span class="number">1</span>].y + height);</div><div class="line">   &#125;</div><div class="line">   mWavePath.lineTo(points[mAllPointCount - <span class="number">1</span>].x, points[mAllPointCount - <span class="number">1</span>].y + height);</div><div class="line">   <span class="comment">//不管如何移动，波浪与圆路径的交集底部永远固定，否则会造成上移的时候底部为空的情况</span></div><div class="line">   mWavePath.lineTo(points[mAllPointCount - <span class="number">1</span>].x, mCenterPoint.y + mRadius);</div><div class="line">   mWavePath.lineTo(points[<span class="number">0</span>].x, mCenterPoint.y + mRadius);</div><div class="line">   mWavePath.close();</div><div class="line">   mWaveLimitPath.addCircle(mCenterPoint.x, mCenterPoint.y, mRadius, Path.Direction.CW);</div><div class="line">   <span class="comment">//取该圆与波浪路径的交集，形成波浪在圆内的效果</span></div><div class="line">   mWaveLimitPath.op(mWavePath, Path.Op.INTERSECT);</div><div class="line">   canvas.drawPath(mWaveLimitPath, paint);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上，就实现了水波动态的效果，当然，你也可以通过配置，来设定水波是否随进度上涨下降。为了实现更好的效果，可以设置一个浅色的水波并支持设置水波的走向(<strong>R2L 和 L2R</strong>)，通过设置浅色波浪和深色波浪动画的时间，从而实现长江后浪推前浪的效果，恩，效果很自然的~自己脑补从右至左波浪的实现和贝塞尔点的计算。</p>
<p>对获取坐标点的代码进行优化：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 从左往右或者从右往左获取贝塞尔点</div><div class="line">*</div><div class="line">* <span class="doctag">@return</span></div><div class="line">*/</div><div class="line"><span class="keyword">private</span> Point[] getPoint(<span class="keyword">boolean</span> isR2L, <span class="keyword">float</span> waveWidth) &#123;</div><div class="line">   Point[] points = <span class="keyword">new</span> Point[mAllPointCount];</div><div class="line">   <span class="comment">//第1个点特殊处理，即数组的中点</span></div><div class="line">   points[mHalfPointCount] = <span class="keyword">new</span> Point((<span class="keyword">int</span>) (mCenterPoint.x + (isR2L ? mRadius : -mRadius)), mCenterPoint.y);</div><div class="line">   <span class="comment">//屏幕内的贝塞尔曲线点</span></div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = mHalfPointCount + <span class="number">1</span>; i &lt; mAllPointCount; i += <span class="number">4</span>) &#123;</div><div class="line">       <span class="keyword">float</span> width = points[mHalfPointCount].x + waveWidth * (i / <span class="number">4</span> - mWaveNum);</div><div class="line">       points[i] = <span class="keyword">new</span> Point((<span class="keyword">int</span>) (waveWidth / <span class="number">4</span> + width), (<span class="keyword">int</span>) (mCenterPoint.y - mWaveHeight));</div><div class="line">       points[i + <span class="number">1</span>] = <span class="keyword">new</span> Point((<span class="keyword">int</span>) (waveWidth / <span class="number">2</span> + width), mCenterPoint.y);</div><div class="line">       points[i + <span class="number">2</span>] = <span class="keyword">new</span> Point((<span class="keyword">int</span>) (waveWidth * <span class="number">3</span> / <span class="number">4</span> + width), (<span class="keyword">int</span>) (mCenterPoint.y + mWaveHeight));</div><div class="line">       points[i + <span class="number">3</span>] = <span class="keyword">new</span> Point((<span class="keyword">int</span>) (waveWidth + width), mCenterPoint.y);</div><div class="line">   &#125;</div><div class="line">   <span class="comment">//屏幕外的贝塞尔曲线点</span></div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mHalfPointCount; i++) &#123;</div><div class="line">       <span class="keyword">int</span> reverse = mAllPointCount - i - <span class="number">1</span>;</div><div class="line">       points[i] = <span class="keyword">new</span> Point((isR2L ? <span class="number">2</span> : <span class="number">1</span>) * points[mHalfPointCount].x - points[reverse].x,</div><div class="line">               points[mHalfPointCount].y * <span class="number">2</span> - points[reverse].y);</div><div class="line">   &#125;</div><div class="line">   <span class="comment">//对从右向左的贝塞尔点数组反序，方便后续处理</span></div><div class="line">   <span class="keyword">return</span> isR2L ? MiscUtil.reverse(points) : points;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，自定义圆形进度条相关的思路已全部讲述完成。代码已全部上传至 Git ，欢迎大家 <strong>Star 和 Fork</strong>，传送门：<a href="https://github.com/MyLifeMyTravel/CircleProgress" target="_blank" rel="external">CircleProgress</a>。</p>
<p>如有不清楚或者错误的地方，欢迎指出~</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;版权声明：本文为博主原创文章，未经博主允许不得转载。&lt;br&gt;微博：&lt;a href=&quot;http://weibo.com/2952381050/profile?rightmod=1&amp;amp;wvr=6&amp;amp;mod=personinfo&quot; targe
    
    </summary>
    
      <category term="Android" scheme="http://www.littlejie.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.littlejie.com/tags/Android/"/>
    
      <category term="自定义View" scheme="http://www.littlejie.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
      <category term="圆形进度条" scheme="http://www.littlejie.com/tags/%E5%9C%86%E5%BD%A2%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
    
      <category term="水波纹进度条" scheme="http://www.littlejie.com/tags/%E6%B0%B4%E6%B3%A2%E7%BA%B9%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
    
  </entry>
  
  <entry>
    <title>自定义仿 QQ 健康计步器进度条</title>
    <link href="http://www.littlejie.com/2017/02/22/%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BB%BF-QQ-%E5%81%A5%E5%BA%B7%E8%AE%A1%E6%AD%A5%E5%99%A8%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
    <id>http://www.littlejie.com/2017/02/22/自定义仿-QQ-健康计步器进度条/</id>
    <published>2017-02-22T10:16:50.000Z</published>
    <updated>2017-02-22T10:18:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义仿-QQ-健康计步器进度条"><a href="#自定义仿-QQ-健康计步器进度条" class="headerlink" title="自定义仿 QQ 健康计步器进度条"></a>自定义仿 QQ 健康计步器进度条</h1><blockquote>
<p>版权声明：本文为博主原创文章，未经博主允许不得转载。<br>微博：<a href="http://weibo.com/2952381050/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo" target="_blank" rel="external">厉圣杰</a><br>源码：<a href="https://github.com/MyLifeMyTravel/CircleProgress" target="_blank" rel="external">CircleProgress</a><br><strong>文中如有纰漏，欢迎大家留言指出。</strong></p>
</blockquote>
<p>闲着没事，趁上班时间偷偷撸了一个圆形进度条，可以实现仿 QQ 健康计步器的圆形进度条，虽然网上这类控件很多，但毕竟是别人写的代码，总没自己写的用起来爽，所以还是选择再造一次轮子。该控件基本满足日常需求，但不支持设置圆弧半径，半径由 View 自行计算得出。</p>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>首先上控件的效果图，没图说个屁啊，是不？<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://odsdowehg.bkt.clouddn.com/cap.gif" alt="cap" title="">
                </div>
                <div class="image-caption">cap</div>
            </figure></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>主要实现逻辑如下：</p>
<ol>
<li>文字定位及绘制</li>
<li>圆弧的绘制及角度的计算</li>
<li>圆弧颜色渐变</li>
<li>动画效果的实现</li>
</ol>
<p>具体逻辑请见代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircleProgress</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = CircleProgress.class.getSimpleName();</div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line"></div><div class="line">    <span class="comment">//默认大小</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mDefaultSize;</div><div class="line">    <span class="comment">//是否开启抗锯齿</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> antiAlias;</div><div class="line">    <span class="comment">//绘制标题</span></div><div class="line">    <span class="keyword">private</span> TextPaint mHintPaint;</div><div class="line">    <span class="keyword">private</span> CharSequence mHint;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mHintColor;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mHintSize;</div><div class="line"></div><div class="line">    <span class="comment">//绘制单位</span></div><div class="line">    <span class="keyword">private</span> TextPaint mUnitPaint;</div><div class="line">    <span class="keyword">private</span> CharSequence mUnit;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mUnitColor;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mUnitSize;</div><div class="line"></div><div class="line">    <span class="comment">//绘制数值</span></div><div class="line">    <span class="keyword">private</span> TextPaint mValuePaint;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mValue;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mMaxValue;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mPrecision;</div><div class="line">    <span class="keyword">private</span> String mPrecisionFormat;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mValueColor;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mValueSize;</div><div class="line"></div><div class="line">    <span class="comment">//绘制圆弧</span></div><div class="line">    <span class="keyword">private</span> Paint mArcPaint;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mArcColor1, mArcColor2, mArcColor3;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mArcWidth;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mStartAngle, mSweepAngle;</div><div class="line">    <span class="keyword">private</span> RectF mRectF;</div><div class="line">    <span class="comment">//渐变</span></div><div class="line">    <span class="keyword">private</span> Matrix mRotateMatrix;</div><div class="line">    <span class="comment">//渐变的颜色是360度，如果只显示270，那么则会缺失部分颜色</span></div><div class="line">    <span class="keyword">private</span> SweepGradient mSweepGradient;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] mGradientColors = &#123;Color.GREEN, Color.YELLOW, Color.RED&#125;;</div><div class="line">    <span class="comment">//当前进度，[0.0f,1.0f]</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mPercent;</div><div class="line">    <span class="comment">//动画时间</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> mAnimTime;</div><div class="line">    <span class="comment">//属性动画</span></div><div class="line">    <span class="keyword">private</span> ValueAnimator mAnimator;</div><div class="line"></div><div class="line">    <span class="comment">//绘制背景圆弧</span></div><div class="line">    <span class="keyword">private</span> Paint mBgArcPaint;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mBgArcColor;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mBgArcWidth;</div><div class="line"></div><div class="line">    <span class="comment">//圆心坐标，半径</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mFloatX, mFloatY, mRadius;</div><div class="line">    <span class="comment">//在屏幕上的坐标</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] mLocationOnScreen = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircleProgress</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        init(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        mContext = context;</div><div class="line">        mDefaultSize = MiscUtil.dipToPx(mContext, <span class="number">150</span>);</div><div class="line">        mAnimator = <span class="keyword">new</span> ValueAnimator();</div><div class="line">        getLocationOnScreen(mLocationOnScreen);</div><div class="line">        mRectF = <span class="keyword">new</span> RectF();</div><div class="line">        initAttrs(attrs);</div><div class="line">        initPaint();</div><div class="line">        setValue(mValue);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initAttrs</span><span class="params">(AttributeSet attrs)</span> </span>&#123;</div><div class="line">        TypedArray typedArray = mContext.obtainStyledAttributes(attrs, R.styleable.CircleProgressBar);</div><div class="line"></div><div class="line">        antiAlias = typedArray.getBoolean(R.styleable.CircleProgressBar_antiAlias, <span class="keyword">false</span>);</div><div class="line"></div><div class="line">        mHint = typedArray.getString(R.styleable.CircleProgressBar_hint);</div><div class="line">        mHintColor = typedArray.getColor(R.styleable.CircleProgressBar_hintColor, Color.BLACK);</div><div class="line">        mHintSize = typedArray.getDimension(R.styleable.CircleProgressBar_hintSize, <span class="number">15</span>);</div><div class="line"></div><div class="line">        mValue = typedArray.getFloat(R.styleable.CircleProgressBar_value, <span class="number">0</span>);</div><div class="line">        mMaxValue = typedArray.getFloat(R.styleable.CircleProgressBar_maxValue, <span class="number">0</span>);</div><div class="line">        <span class="comment">//内容数值精度格式</span></div><div class="line">        mPrecision = typedArray.getInt(R.styleable.CircleProgressBar_precision, <span class="number">0</span>);</div><div class="line">        mPrecisionFormat = getPrecisionFormat(mPrecision);</div><div class="line">        mValueColor = typedArray.getColor(R.styleable.CircleProgressBar_valueColor, Color.BLACK);</div><div class="line">        mValueSize = typedArray.getDimension(R.styleable.CircleProgressBar_valueSize, <span class="number">60</span>);</div><div class="line"></div><div class="line">        mUnit = typedArray.getString(R.styleable.CircleProgressBar_unit);</div><div class="line">        mUnitColor = typedArray.getColor(R.styleable.CircleProgressBar_unitColor, Color.BLACK);</div><div class="line">        mUnitSize = typedArray.getDimension(R.styleable.CircleProgressBar_unitSize, <span class="number">15</span>);</div><div class="line"></div><div class="line">        <span class="comment">// 设置渐变色</span></div><div class="line">        mArcColor1 = typedArray.getColor(R.styleable.CircleProgressBar_arcColor1, Color.GREEN);</div><div class="line">        mArcColor2 = typedArray.getColor(R.styleable.CircleProgressBar_arcColor2, Color.YELLOW);</div><div class="line">        mArcColor3 = typedArray.getColor(R.styleable.CircleProgressBar_arcColor3, Color.RED);</div><div class="line">        mGradientColors = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;mArcColor1, mArcColor2, mArcColor3&#125;;</div><div class="line"></div><div class="line">        mArcWidth = typedArray.getDimension(R.styleable.CircleProgressBar_arcWidth, <span class="number">15</span>);</div><div class="line">        mStartAngle = typedArray.getFloat(R.styleable.CircleProgressBar_startAngle, <span class="number">270</span>);</div><div class="line">        mSweepAngle = typedArray.getFloat(R.styleable.CircleProgressBar_sweepAngle, <span class="number">360</span>);</div><div class="line"></div><div class="line">        mBgArcColor = typedArray.getColor(R.styleable.CircleProgressBar_bgArcColor, Color.WHITE);</div><div class="line">        mBgArcWidth = typedArray.getDimension(R.styleable.CircleProgressBar_bgArcWidth, <span class="number">15</span>);</div><div class="line"></div><div class="line">        <span class="comment">//mPercent = typedArray.getFloat(R.styleable.CircleProgressBar_percent, 0);</span></div><div class="line">        mAnimTime = typedArray.getInt(R.styleable.CircleProgressBar_animTime, <span class="number">1000</span>);</div><div class="line"></div><div class="line">        typedArray.recycle();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getPrecisionFormat</span><span class="params">(<span class="keyword">int</span> precision)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"%."</span> + precision + <span class="string">"f"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initPaint</span><span class="params">()</span> </span>&#123;</div><div class="line">        mHintPaint = <span class="keyword">new</span> TextPaint();</div><div class="line">        <span class="comment">// 设置抗锯齿,会消耗较大资源，绘制图形速度会变慢。</span></div><div class="line">        mHintPaint.setAntiAlias(antiAlias);</div><div class="line">        <span class="comment">// 设置绘制文字大小</span></div><div class="line">        mHintPaint.setTextSize(mHintSize);</div><div class="line">        <span class="comment">// 设置画笔颜色</span></div><div class="line">        mHintPaint.setColor(mHintColor);</div><div class="line">        <span class="comment">// 从中间向两边绘制，不需要再次计算文字</span></div><div class="line">        mHintPaint.setTextAlign(Paint.Align.CENTER);</div><div class="line"></div><div class="line">        mValuePaint = <span class="keyword">new</span> TextPaint();</div><div class="line">        mValuePaint.setAntiAlias(antiAlias);</div><div class="line">        mValuePaint.setTextSize(mValueSize);</div><div class="line">        mValuePaint.setColor(mValueColor);</div><div class="line">        <span class="comment">// 设置Typeface对象，即字体风格，包括粗体，斜体以及衬线体，非衬线体等</span></div><div class="line">        mValuePaint.setTypeface(Typeface.DEFAULT_BOLD);</div><div class="line">        mValuePaint.setTextAlign(Paint.Align.CENTER);</div><div class="line"></div><div class="line">        mUnitPaint = <span class="keyword">new</span> TextPaint();</div><div class="line">        mUnitPaint.setAntiAlias(antiAlias);</div><div class="line">        mUnitPaint.setTextSize(mUnitSize);</div><div class="line">        mUnitPaint.setColor(mUnitColor);</div><div class="line">        mUnitPaint.setTextAlign(Paint.Align.CENTER);</div><div class="line"></div><div class="line">        mArcPaint = <span class="keyword">new</span> Paint();</div><div class="line">        mArcPaint.setAntiAlias(antiAlias);</div><div class="line">        mArcPaint.setColor(mArcColor1);</div><div class="line">        <span class="comment">// 设置画笔的样式，为FILL，FILL_OR_STROKE，或STROKE</span></div><div class="line">        mArcPaint.setStyle(Paint.Style.STROKE);</div><div class="line">        <span class="comment">// 设置画笔粗细</span></div><div class="line">        mArcPaint.setStrokeWidth(mArcWidth);</div><div class="line">        <span class="comment">// 当画笔样式为STROKE或FILL_OR_STROKE时，设置笔刷的图形样式，如圆形样式</span></div><div class="line">        <span class="comment">// Cap.ROUND,或方形样式 Cap.SQUARE</span></div><div class="line">        mArcPaint.setStrokeCap(Paint.Cap.ROUND);</div><div class="line">        mRotateMatrix = <span class="keyword">new</span> Matrix();</div><div class="line"></div><div class="line">        mBgArcPaint = <span class="keyword">new</span> Paint();</div><div class="line">        mBgArcPaint.setAntiAlias(antiAlias);</div><div class="line">        mBgArcPaint.setColor(mBgArcColor);</div><div class="line">        mBgArcPaint.setStyle(Paint.Style.STROKE);</div><div class="line">        mBgArcPaint.setStrokeWidth(mBgArcWidth);</div><div class="line">        mBgArcPaint.setStrokeCap(Paint.Cap.ROUND);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">        <span class="comment">//设置默认内边距，防止圆弧与边界重叠</span></div><div class="line">        <span class="keyword">int</span> padding = MiscUtil.dipToPx(mContext, <span class="number">5</span>);</div><div class="line">        setPadding(padding, padding, padding, padding);</div><div class="line">        <span class="comment">//因为是画圆，所以宽高相等</span></div><div class="line">        <span class="keyword">int</span> measuredWidth = MiscUtil.measure(widthMeasureSpec, mDefaultSize);</div><div class="line">        <span class="keyword">int</span> measuredHeight = MiscUtil.measure(heightMeasureSpec, mDefaultSize);</div><div class="line">        <span class="comment">//求最小值作为实际值</span></div><div class="line">        <span class="keyword">int</span> size = Math.min(measuredWidth, measuredHeight);</div><div class="line">        setMeasuredDimension(measuredWidth + getPaddingLeft() + getPaddingRight(),</div><div class="line">                measuredHeight + getPaddingTop() + getPaddingBottom());</div><div class="line">        <span class="comment">//获取圆的相关参数</span></div><div class="line">        mFloatX = mLocationOnScreen[<span class="number">0</span>] + size / <span class="number">2</span> + getPaddingLeft();</div><div class="line">        mFloatY = mLocationOnScreen[<span class="number">1</span>] + size / <span class="number">2</span> + getPaddingTop();</div><div class="line">        <span class="comment">//求圆弧和背景圆弧的最大宽度</span></div><div class="line">        <span class="keyword">float</span> maxArcWidth = Math.max(mArcWidth, mBgArcWidth);</div><div class="line">        <span class="comment">//减去圆弧的宽度，否则会造成部分圆弧绘制在外围，通过clipPadding属性可以解决</span></div><div class="line">        mRadius = size / <span class="number">2</span> - maxArcWidth;</div><div class="line">        <span class="comment">//绘制圆弧的边界</span></div><div class="line">        mRectF.left = mLocationOnScreen[<span class="number">0</span>] + getPaddingLeft();</div><div class="line">        mRectF.top = mLocationOnScreen[<span class="number">1</span>] + getPaddingTop();</div><div class="line">        mRectF.right = mRectF.left + size;</div><div class="line">        mRectF.bottom = mRectF.top + size;</div><div class="line">        updateArcPaint();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDraw(canvas);</div><div class="line">        drawText(canvas);</div><div class="line">        drawArc(canvas);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 绘制内容文字</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> canvas</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawText</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="comment">// 计算文字宽度，由于Paint已设置为居中绘制，故此处不需要重新计算</span></div><div class="line">        <span class="comment">// float textWidth = mValuePaint.measureText(mValue.toString());</span></div><div class="line">        <span class="comment">// float x = mFloatX - textWidth / 2;</span></div><div class="line">        <span class="keyword">float</span> y = mFloatY - (mValuePaint.descent() + mValuePaint.ascent()) / <span class="number">2</span>;</div><div class="line">        canvas.drawText(String.format(mPrecisionFormat, mValue), mFloatX, y, mValuePaint);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mHint != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">float</span> hy = mFloatY * <span class="number">2</span> / <span class="number">3</span> - (mHintPaint.descent() + mHintPaint.ascent()) / <span class="number">2</span>;</div><div class="line">            canvas.drawText(mHint.toString(), mFloatX, hy, mHintPaint);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mUnit != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">float</span> uy = mFloatY * <span class="number">4</span> / <span class="number">3</span> - (mUnitPaint.descent() + mUnitPaint.ascent()) / <span class="number">2</span>;</div><div class="line">            canvas.drawText(mUnit.toString(), mFloatX, uy, mUnitPaint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">drawArc</span><span class="params">(Canvas canvas)</span> </span>&#123;</div><div class="line">        <span class="comment">// 绘制背景圆弧</span></div><div class="line">        <span class="comment">// 从进度圆弧结束的地方开始重新绘制，优化性能</span></div><div class="line">        <span class="keyword">float</span> currentAngle = mSweepAngle * mPercent;</div><div class="line">        canvas.drawArc(mRectF, mStartAngle, mSweepAngle, <span class="keyword">false</span>, mBgArcPaint);</div><div class="line">        <span class="comment">// 第一个参数 oval 为 RectF 类型，即圆弧显示区域</span></div><div class="line">        <span class="comment">// startAngle 和 sweepAngle  均为 float 类型，分别表示圆弧起始角度和圆弧度数</span></div><div class="line">        <span class="comment">// 3点钟方向为0度，顺时针递增</span></div><div class="line">        <span class="comment">// 如果 startAngle &lt; 0 或者 &gt; 360,则相当于 startAngle % 360</span></div><div class="line">        <span class="comment">// useCenter:如果为True时，在绘制圆弧时将圆心包括在内，通常用来绘制扇形</span></div><div class="line">        canvas.drawArc(mRectF, mStartAngle, currentAngle, <span class="keyword">false</span>, mArcPaint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 更新圆弧画笔</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">updateArcPaint</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// 设置渐变</span></div><div class="line">        mSweepGradient = <span class="keyword">new</span> SweepGradient(mFloatX, mFloatY, mGradientColors, <span class="keyword">null</span>);</div><div class="line">        <span class="comment">// 矩阵变化，-5是因为开始颜色可能会与结束颜色重叠</span></div><div class="line">        mRotateMatrix.setRotate(mStartAngle - <span class="number">5</span>, mFloatX, mFloatY);</div><div class="line">        mSweepGradient.setLocalMatrix(mRotateMatrix);</div><div class="line">        mArcPaint.setShader(mSweepGradient);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAntiAlias</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> antiAlias;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> CharSequence <span class="title">getHint</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mHint;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHint</span><span class="params">(CharSequence hint)</span> </span>&#123;</div><div class="line">        mHint = hint;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> CharSequence <span class="title">getUnit</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mUnit;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUnit</span><span class="params">(CharSequence unit)</span> </span>&#123;</div><div class="line">        mUnit = unit;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mValue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置当前值</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> value</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">float</span> value)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (value &gt; mMaxValue) &#123;</div><div class="line">            value = mMaxValue;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">float</span> start = mPercent;</div><div class="line">        <span class="keyword">float</span> end = value / mMaxValue;</div><div class="line">        startAnimator(start, end, mAnimTime);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startAnimator</span><span class="params">(<span class="keyword">float</span> start, <span class="keyword">float</span> end, <span class="keyword">long</span> animTime)</span> </span>&#123;</div><div class="line">        mAnimator.setDuration(animTime);</div><div class="line">        mAnimator = ValueAnimator.ofFloat(start, end);</div><div class="line">        mAnimator.addUpdateListener(<span class="keyword">new</span> ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAnimationUpdate</span><span class="params">(ValueAnimator animation)</span> </span>&#123;</div><div class="line">                mPercent = (<span class="keyword">float</span>) animation.getAnimatedValue();</div><div class="line">                mValue = mPercent * mMaxValue;</div><div class="line">                <span class="keyword">if</span> (BuildConfig.DEBUG) &#123;</div><div class="line">                    Log.d(TAG, <span class="string">"onAnimationUpdate: percent = "</span> + mPercent</div><div class="line">                            + <span class="string">";currentAngle = "</span> + (mSweepAngle * mPercent)</div><div class="line">                            + <span class="string">";value = "</span> + mValue);</div><div class="line">                &#125;</div><div class="line">                invalidate();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        mAnimator.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取最大值</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getMaxValue</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mMaxValue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置最大值</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> maxValue</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxValue</span><span class="params">(<span class="keyword">float</span> maxValue)</span> </span>&#123;</div><div class="line">        mMaxValue = maxValue;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取精度</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrecision</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mPrecision;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrecision</span><span class="params">(<span class="keyword">int</span> precision)</span> </span>&#123;</div><div class="line">        mPrecision = precision;</div><div class="line">        mPrecisionFormat = getPrecisionFormat(precision);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] getGradientColors() &#123;</div><div class="line">        <span class="keyword">return</span> mGradientColors;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置渐变</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> gradientColors</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGradientColors</span><span class="params">(<span class="keyword">int</span>[] gradientColors)</span> </span>&#123;</div><div class="line">        mGradientColors = gradientColors;</div><div class="line">        updateArcPaint();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getAnimTime</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mAnimTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnimTime</span><span class="params">(<span class="keyword">long</span> animTime)</span> </span>&#123;</div><div class="line">        mAnimTime = animTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 重置</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</div><div class="line">        startAnimator(mPercent, <span class="number">0.0f</span>, <span class="number">1000L</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDetachedFromWindow();</div><div class="line">        <span class="comment">//释放资源</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="XML-配置"><a href="#XML-配置" class="headerlink" title="XML 配置"></a>XML 配置</h2><p>通过 XML 可以配置出多种效果，支持配置属性如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"CircleProgressBar"</span>&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 是否开启抗锯齿 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"antiAlias"</span> <span class="attr">format</span>=<span class="string">"boolean"</span> /&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 绘制内容相应的提示语 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"hint"</span> <span class="attr">format</span>=<span class="string">"string|reference"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"hintSize"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"hintColor"</span> <span class="attr">format</span>=<span class="string">"color|reference"</span> /&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 绘制内容的单位 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"unit"</span> <span class="attr">format</span>=<span class="string">"string|reference"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"unitSize"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"unitColor"</span> <span class="attr">format</span>=<span class="string">"color|reference"</span> /&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 绘制内容的数值 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"maxValue"</span> <span class="attr">format</span>=<span class="string">"float"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"value"</span> <span class="attr">format</span>=<span class="string">"float"</span> /&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 精度，默认为0 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"precision"</span> <span class="attr">format</span>=<span class="string">"integer"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"valueSize"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"valueColor"</span> <span class="attr">format</span>=<span class="string">"color|reference"</span> /&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 圆弧颜色，设置多个可实现渐变 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"arcColor1"</span> <span class="attr">format</span>=<span class="string">"color|reference"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"arcColor2"</span> <span class="attr">format</span>=<span class="string">"color|reference"</span> /&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"arcColor3"</span> <span class="attr">format</span>=<span class="string">"color|reference"</span> /&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 圆弧宽度 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"arcWidth"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 圆弧起始角度，3点钟方向为0，顺时针递增，小于0或大于360进行取余 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"startAngle"</span> <span class="attr">format</span>=<span class="string">"float"</span> /&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 圆弧度数 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"sweepAngle"</span> <span class="attr">format</span>=<span class="string">"float"</span> /&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 当前进度百分比 --&gt;</span></div><div class="line">   <span class="comment">&lt;!--&lt;attr name="percent" format="float"/&gt;--&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 设置动画时间 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"animTime"</span> <span class="attr">format</span>=<span class="string">"integer"</span> /&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 背景圆弧颜色 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"bgArcColor"</span> <span class="attr">format</span>=<span class="string">"color|reference"</span> /&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 背景圆弧宽度 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">"bgArcWidth"</span> <span class="attr">format</span>=<span class="string">"dimension"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="代码配置"><a href="#代码配置" class="headerlink" title="代码配置"></a>代码配置</h2><p>考虑到圆弧大小、圆弧起始角度等属性一般不可能动态改变，所以通过代码并不能设置 CircleProgress 的全部属性。具体支持方法可以查看 <code>CircleProgress.java</code> 中的 <code>setter</code> 方法。</p>
<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>该控件还有许多值得改进的地方，如：对重绘的优化。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;自定义仿-QQ-健康计步器进度条&quot;&gt;&lt;a href=&quot;#自定义仿-QQ-健康计步器进度条&quot; class=&quot;headerlink&quot; title=&quot;自定义仿 QQ 健康计步器进度条&quot;&gt;&lt;/a&gt;自定义仿 QQ 健康计步器进度条&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;版
    
    </summary>
    
      <category term="Android" scheme="http://www.littlejie.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.littlejie.com/tags/Android/"/>
    
      <category term="自定义View" scheme="http://www.littlejie.com/tags/%E8%87%AA%E5%AE%9A%E4%B9%89View/"/>
    
      <category term="进度条" scheme="http://www.littlejie.com/tags/%E8%BF%9B%E5%BA%A6%E6%9D%A1/"/>
    
  </entry>
  
  <entry>
    <title>Android 获取浏览器当前分享页面的截屏</title>
    <link href="http://www.littlejie.com/2017/02/20/Android-%E8%8E%B7%E5%8F%96%E6%B5%8F%E8%A7%88%E5%99%A8%E5%BD%93%E5%89%8D%E5%88%86%E4%BA%AB%E9%A1%B5%E9%9D%A2%E6%88%AA%E5%B1%8F/"/>
    <id>http://www.littlejie.com/2017/02/20/Android-获取浏览器当前分享页面截屏/</id>
    <published>2017-02-20T10:16:50.000Z</published>
    <updated>2017-03-09T09:22:01.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-获取浏览器当前分享页面的截屏"><a href="#Android-获取浏览器当前分享页面的截屏" class="headerlink" title="Android 获取浏览器当前分享页面的截屏"></a>Android 获取浏览器当前分享页面的截屏</h1><blockquote>
<p>版权声明：本文为博主原创文章，未经博主允许不得转载。<br>微博：<a href="http://weibo.com/2952381050/profile?rightmod=1&amp;wvr=6&amp;mod=personinfo" target="_blank" rel="external">厉圣杰</a><br>源码：<a href="https://github.com/MyLifeMyTravel/AndroidCore/blob/master/demo/src/main/java/com/littlejie/demo/modules/advance/BrowserScreenShotActivity.java" target="_blank" rel="external">AndroidDemo/BrowserScreenShotActivity</a><br><strong>文中如有纰漏，欢迎大家留言指出。</strong></p>
</blockquote>
<p>今天在项目中碰见这么一个需求：获取 Chrome 浏览器分享时，页面的截屏。静下来一想，既然是分享，那么肯定得通过 Intent 来传递数据，如果真的能获取到 Chrome 分享页面时的截屏，那么 Intent 的数据中，一定有 <code>.jpg</code> 或者 <code>.png</code> 结尾的数据。说干就干，Demo 写起来。</p>
<p>首先，新建一个 <code>BrowserScreenShotActivity.java</code>，在 <code>AndroidManifest.xml</code> 注册一下 <code>&lt;intent-filter&gt;</code>。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></div><div class="line">          <span class="attr">package</span>=<span class="string">"com.littlejie.demo"</span>&gt;</div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 读写权限 --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 用于读取浏览器分享时生成的屏幕截图 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">application</span></span></div><div class="line">        <span class="attr">android:name</span>=<span class="string">".modules.DemoApplication"</span></div><div class="line">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></div><div class="line">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></div><div class="line">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        </div><div class="line">        <span class="comment">&lt;!-- some other thing --&gt;</span></div><div class="line"></div><div class="line">        <span class="comment">&lt;!-- 注册 Intent，用于接受浏览器分享 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">activity</span></span></div><div class="line">            <span class="attr">android:name</span>=<span class="string">".modules.advance.BrowserScreenShotActivity"</span></div><div class="line">            <span class="attr">android:launchMode</span>=<span class="string">"singleTask"</span>&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.SEND"</span>/&gt;</span></div><div class="line">                <span class="comment">&lt;!-- 发送多个数据 --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.SEND_MULTIPLE"</span>/&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></div><div class="line"></div><div class="line">                <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:mimeType</span>=<span class="string">"*/*"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div></pre></td></tr></table></figure>
<p>接下去，在浏览器中随便打开一个页面，分享至 Demo，这里有个问题，就是：屏幕截图数据在 Intent 中对应的 Key 我们并不知道，那怎么办呢？打断点啊！</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://odsdowehg.bkt.clouddn.com/2017-02-20" alt="2017-02-20" title="">
                </div>
                <div class="image-caption">2017-02-20</div>
            </figure>
<p>通过断点查看 Intent 的数据结构，发现 Intent 中的 mMap 成员变量含有一个 Uri，格式如下：<code>content://com.android.chrome.FileProvider/BlockedFile_33215122012582</code>，一眼看去就猜测这个 Uri 是 Chrome 通过 ContentProvider 供其他程序调用的，虽然与一开始猜测<strong>有已 .jpg 和 .png 结尾的数据</strong>不太一致，但好歹是有所发现。</p>
<p>恩，现在还有一个问题，那就是 <code>mMap.value[3]</code> 对应的 key 值是多少？在上述断点界面根本就差看不到，但是 Android Studio 是很强大的，只是你没发现而已，既然 mMap 是一个 Map，那么久能通过 <code>keySet()</code> 方法获取 Map 的 key。接下来就是 Android Studio 大展拳脚的时间。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://odsdowehg.bkt.clouddn.com/2017-02-20" alt="2017-02-20" title="">
                </div>
                <div class="image-caption">2017-02-20</div>
            </figure>
<p>如上图所示的，在 Debug 界面，点击最后一个图标:Evaluate Expression（快捷键：option + f8）。在弹出的对话框中输入如下内容，回车，你会发现 Map 的 key 都出来了：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://odsdowehg.bkt.clouddn.com/屏幕快照" alt="屏幕快照" title="">
                </div>
                <div class="image-caption">屏幕快照</div>
            </figure></p>
<p>通过与第一幅图对比，发现下标为3的值（share_screenshot_as_stream）为我们需要的 key。</p>
<p>布局比较简单，这里就不贴了，简单截取 <code>BrowserSrceenShotActivity.java</code> 中的代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 获取浏览器分享网页时的屏幕图片</div><div class="line"> * &lt;p&gt;</div><div class="line"> * 默认情况下，图片都是以Uri形式保存在Intent的Map中，但不同浏览器的key不一样</div><div class="line"> * Firefox不支持屏幕截图、百度只能获取浏览器图标</div><div class="line"> * &lt;p&gt;</div><div class="line"> * 测试时，请在AndroidManifest.xml中将ShareActivity相关配置注释</div><div class="line"> */</div><div class="line"><span class="meta">@Description</span>(description = <span class="string">"浏览器截屏获取"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowserScreenShotActivity</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//chrome/内置浏览器/UC/QQ</span></div><div class="line">    <span class="comment">//通过getContentResolver().query()，可以得知Chrome有_display_name、_size、_data三个字段来保存截屏图片相关数据</span></div><div class="line">    <span class="comment">//但是通过Cursor查询时，_data字段为null，所以只能通过输入流来统一处理</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] KEY_BROWSER_SCREENSHOT = &#123;<span class="string">"share_screenshot_as_stream"</span>,</div><div class="line">            <span class="string">"share_full_screen"</span>, <span class="string">"file"</span>, <span class="string">"android.intent.extra.STREAM"</span>&#125;;</div><div class="line"></div><div class="line">    <span class="meta">@BindView</span>(R.id.iv_screen_shot)</div><div class="line">    ImageView mIvScreenShot;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">getPageLayoutID</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> R.layout.activity_browser_screen_shot;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (getIntent() == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initViewListener</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">        <span class="keyword">if</span> (getIntent() == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        Uri screenShot = <span class="keyword">null</span>;</div><div class="line">        <span class="comment">//循环遍历，获取截屏的Uri</span></div><div class="line">        <span class="keyword">for</span> (String key : KEY_BROWSER_SCREENSHOT) &#123;</div><div class="line">            screenShot = getIntent().getExtras().getParcelable(key);</div><div class="line">            <span class="keyword">if</span> (screenShot != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (screenShot == <span class="keyword">null</span>) &#123;</div><div class="line">            ToastUtil.showDefaultToast(<span class="string">"获取浏览器截屏失败~"</span>);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//授权Uri的读取权限</span></div><div class="line">            <span class="comment">//若不授权，在 Android 6.0 以上测试崩溃</span></div><div class="line">            <span class="comment">//https://thinkandroid.wordpress.com/2012/08/07/granting-content-provider-uri-permissions/</span></div><div class="line">            <span class="comment">//第一个参数为需要授权的apk包名</span></div><div class="line">            grantUriPermission(<span class="string">"com.littlejie.demo"</span>, screenShot, Intent.FLAG_GRANT_READ_URI_PERMISSION);</div><div class="line">            <span class="comment">//通过ContentProvider获取截屏图片的输入流</span></div><div class="line">            InputStream is = getContentResolver().openInputStream(screenShot);</div><div class="line">            mIvScreenShot.setImageBitmap(BitmapFactory.decodeStream(is));</div><div class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>运行结果如下：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://odsdowehg.bkt.clouddn.com/screenshot.png" alt="screenshot" title="">
                </div>
                <div class="image-caption">screenshot</div>
            </figure></p>
<p>对于获取 Chrome 浏览器分享页面的截屏就告一段落，闲着没事，自己又测试了几个浏览器，包括系统内置浏览器、QQ浏览器、UC浏览器、百度浏览器、火狐浏览器，发现每个浏览器的差异很大。</p>
<ul>
<li>系统浏览器、UC浏览器与 Chrome 相差不大，只是 key 变成了 <code>share_full_screen</code> 和 <code>file</code></li>
<li>QQ浏览器的分享行为与分享文件很相似，其 key 为 <code>android.intent.extra.STREAM</code>(Intent.EXTRA_STREAM)。</li>
<li>百度浏览器是个什么鬼就不知道了，默默的把应用图标给分享过来了</li>
<li>火狐浏览器不支持分享页面截图</li>
</ul>
<p>恩，就这么多，获取浏览器分享页面截屏主要还是靠浏览器的支持，真的市面上这么多浏览器适配起来还真麻烦。这次主要对 Android Studio 强大的 Debug功能进行了学习。PS：Android Studio真是极其强大的工具，用好它事半功倍，唯一不足的就是太耗性能。</p>
<p><a href="https://github.com/MyLifeMyTravel/AndroidCore/blob/master/demo/src/main/java/com/littlejie/demo/modules/advance/BrowserScreenShotActivity.java" target="_blank" rel="external">Demo 代码传送门</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Android-获取浏览器当前分享页面的截屏&quot;&gt;&lt;a href=&quot;#Android-获取浏览器当前分享页面的截屏&quot; class=&quot;headerlink&quot; title=&quot;Android 获取浏览器当前分享页面的截屏&quot;&gt;&lt;/a&gt;Android 获取浏览器当前分享页面的
    
    </summary>
    
      <category term="Android" scheme="http://www.littlejie.com/categories/Android/"/>
    
    
      <category term="Android" scheme="http://www.littlejie.com/tags/Android/"/>
    
      <category term="浏览器" scheme="http://www.littlejie.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Android 开发规范</title>
    <link href="http://www.littlejie.com/2017/02/13/Android-%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    <id>http://www.littlejie.com/2017/02/13/Android-开发规范/</id>
    <published>2017-02-13T12:15:23.000Z</published>
    <updated>2017-03-14T06:06:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>个人总结的 Android 开发规范，其中控件缩写及 Android 资源文件命名部分不是很确定，有待商榷。Java 部分编程风格请参考：<a href="http://www.hawstein.com/posts/google-java-style.html" target="_blank" rel="external">Google Java 命名规范</a>。</p>
<p>2017-02-13 更新：2017年开春之际，诚意献上重磅大礼：阿里巴巴Java开发手册，首次公开阿里官方Java代码规范标准。这套Java统一规范标准将有助于提高行业编码规范化水平，帮助行业人员提高开发质量和效率、大大降低代码维护成本。<a href="https://yq.aliyun.com/attachment/download/?id=1170" target="_blank" rel="external">点此下载</a></p>
<h2 id="约定"><a href="#约定" class="headerlink" title="约定"></a>约定</h2><ol>
<li>统一调整 IDE 的编码方式为 UTF-8<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://odsdowehg.bkt.clouddn.com/01.png" alt="01" title="">
                </div>
                <div class="image-caption">01</div>
            </figure></li>
<li>统一调整 IDE 的 Tab 缩进为 4 个空格<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://odsdowehg.bkt.clouddn.com/0.png" alt="0" title="">
                </div>
                <div class="image-caption">0</div>
            </figure></li>
<li><p>花括号不要单独一行，和它前面的代码同一行。而且，花括号与前面的代码之间用一个空格隔开。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123; <span class="comment">// Good </span></div><div class="line"> </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span></div><div class="line">&#123; <span class="comment">// Bad</span></div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123; <span class="comment">// Bad</span></div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>空格的使用：if、else、for、switch、while等逻辑关键字与后面的语句留一个空格隔开。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Good</span></div><div class="line"><span class="keyword">if</span> (booleanVariable) &#123;</div><div class="line">    <span class="comment">// TODO while booleanVariable is true</span></div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// TODO else</span></div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="comment">// Bad</span></div><div class="line"><span class="keyword">if</span>(booleanVariable) &#123;</div><div class="line">    <span class="comment">// TODO while booleanVariable is true</span></div><div class="line">&#125;<span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// TODO else</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 运算符两边各用一个空格隔开。</span></div><div class="line"><span class="keyword">int</span> result = a + b; <span class="comment">//Good, = 和 + 两边各用一个空格隔开</span></div><div class="line"><span class="keyword">int</span> result=a+b; <span class="comment">//Bad,=和+两边没用空格隔开</span></div><div class="line"></div><div class="line"><span class="comment">// 方法的每个参数之间用一个空格隔开。</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String param1, String param2)</span></span>; <span class="comment">// Good，param1后面的逗号与String之间隔了一个空格</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(param1, param2)</span></span>; <span class="comment">// Good，方法调用时，param1后面的逗号与param2之间隔了一个空格</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(param1,param2)</span></span>; <span class="comment">// Bad，没有用一个空格隔开</span></div></pre></td></tr></table></figure>
</li>
<li><p>空行的使用，拒绝拖沓无分割，关联代码段放一块并与后面代码分割</p>
<ul>
<li>两个方法之间</li>
<li>方法内的两个逻辑段之间</li>
<li>方法内的局部变量和方法的第一条逻辑语句之间</li>
<li>常量和变量之间</li>
<li><strong>方法名和方法内第一条语句不要有空格</strong></li>
</ul>
</li>
<li>Activity.onCreate()，Fragment.onActivityCreated()，作为程序入口，不要写入太多代码，尽量保持只调用 initXXX() 方法，简单明了展示调用过程。如：initData()，initView()。可在 BaseActivity 、 BaseFragment 中实现 init 执行顺序，子类实现，即 <strong>模板方法模式</strong>。</li>
<li><strong>Application 中只执行应用初始化相关操作，尽量不要涉及业务逻辑。如有，请单独剥离。参考第 6 条</strong></li>
<li>单个方法体不要过长，最好不要超过一屏，竖屏显示器请无视~</li>
<li>一行声明一个变量，不要一行声明多个变量，这样有利于写注释。</li>
<li>代码任何地方不要拼错单词</li>
<li><p><strong>代码必须格式化</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Windows：CTRL + ALT + L</div><div class="line">Mac：OPTION + COMMAND + L</div></pre></td></tr></table></figure>
</li>
<li><p>文字大小的单位统一用 sp，元素大小的单位统一用 dp；应用中的字符串统一在 <code>/values/strings.xml</code> 中定义；颜色值统一在 <code>/values/colors.xml</code> 中定义；菜单定义统一放在 <code>/menu/****.xml</code> 中；自定义View 属性统一在 <code>/values/attrs.xml</code> 中；自定义drawable 文件统一在 <code>/drawable/****.xml</code> 中；自定义样式统一在 <code>/values/styles.xml</code>。</p>
</li>
<li>调用方法保持“临近原则”，被调用的方法，放在调用方法下方</li>
<li>用好 TODO 标记<ul>
<li>记录想法，记录功能点，开发过程中可以利用 TODO 记录一下临时想法或为了不打扰思路留下待完善的说明</li>
<li>删除无用 TODO ，开发工具自动生成的 TODO ，或则已经完善的 TODO ，一定要删除。</li>
</ul>
</li>
<li>处理“魔法数字”等看不懂的神秘数字<ul>
<li>代码中不要出现数字，特别是一些标识不同类型的数字。</li>
<li>所有意义数字全部抽取到 Constant 公共类中，避免散布在各位类中。</li>
<li>所有有意义的字符串公共常量全部抽取到 Constant 公共类中</li>
</ul>
</li>
</ol>
<h2 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h2><p><strong>命名除了要遵守以下规范，还得见名知意。</strong></p>
<h3 id="类和接口命名"><a href="#类和接口命名" class="headerlink" title="类和接口命名"></a>类和接口命名</h3><p>使用大驼峰规则，用名词或名词词组命名，每个单词的首字母大写。<br>以下为几种常用类的命名：</p>
<ul>
<li>Activity 类，命名以 Activity 为后缀，如：<code>LoginActivity</code></li>
<li>Fragment 类，命名以 Fragment 为后缀，如：<code>LoginFragment</code></li>
<li>Service 类，命名以 Service 为后缀，如：<code>DownloadService</code></li>
<li>Adapter 类，命名以 Adapter 为后缀，如：<code>CouponAdapter</code></li>
<li>工具类，命名以 Util 为后缀，如：<code>EncryptUtil</code></li>
<li>模型类，命名以 Info 为后缀，如：<code>UserInfo</code></li>
<li>接口实现类，命名以 Impl 为后缀，如：<code>ApiImpl</code></li>
</ul>
<h3 id="方法命名"><a href="#方法命名" class="headerlink" title="方法命名"></a>方法命名</h3><p>使用小驼峰规则，用动词命名，<strong>第一个单词的首字母小写</strong>，其他单词的首字母大写。以下为几种常用方法的命名：</p>
<ul>
<li>初始化方法，命名以 init 开头，例：initView()</li>
<li>按钮点击方法或 Activity 跳转方法，命名以 to 开头，例：toLogin()、toMainActivity()</li>
<li>设置方法，命名以 set 开头，例：setData()</li>
<li>具有返回值的获取方法，命名以 get 开头，例：getData()</li>
<li>通过异步加载数据的方法，命名以 load 开头，例：loadData()</li>
<li>布尔型的判断方法，命名以 is 或 has ，或具有逻辑意义的单词如 equals ，例：isEmpty()</li>
</ul>
<h3 id="常量命名"><a href="#常量命名" class="headerlink" title="常量命名"></a>常量命名</h3><p>全部为大写单词，单词之间用下划线分开。常量一般放在 <code>Constant</code> 类</p>
<ul>
<li>Intent 参数以 <strong>PARAM_EXTRA</strong> 开头 </li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Intent 参数</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String PARAM_EXTRA_ID = <span class="string">"id"</span>;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> PAGE_SIZE = <span class="number">20</span>;</div></pre></td></tr></table></figure>
<h3 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h3><p>使用驼峰规则，首字母必须小写，使用名词或名词词组。要求简单易懂，富于描述，不允许出现无意义或错误单词。</p>
<ul>
<li>普通成员变量命名以 <code>mCamelCase</code> 样式命名，静态变量以 <code>sCamelCase</code> 命名</li>
<li><strong>boolean 类型的成员变量命名可以不遵循第一条</strong>，以 <code>lowerCamelCase</code> 样式命名</li>
<li>控件变量命名都已 控件缩写 + 控件作用 来命名，如：登录按钮命名为 mBtnLogin；</li>
<li>参数变量、临时变量都已 <code>lowerCamelCase</code> 样式命名</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Button mBtnLogin;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isLaunch;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">(String text)</span> </span>&#123;</div><div class="line">        <span class="comment">// Todo...</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>补充：如果你使用 Android Studio 为开发工具，则可以通过如下方式设置变量前缀<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://odsdowehg.bkt.clouddn.com/屏幕快照" alt="屏幕快照" title="">
                </div>
                <div class="image-caption">屏幕快照</div>
            </figure></p>
<h3 id="控件缩写"><a href="#控件缩写" class="headerlink" title="控件缩写"></a>控件缩写</h3><p>常见控件缩写约定如下：</p>
<ul>
<li>TextView: tv</li>
<li>EditText: edt</li>
<li>Button: btn</li>
<li>RadioButton: rb</li>
<li>ImageButton: ib</li>
<li>ImageView: iv</li>
<li>RelativeLayout/LinearLayout/FrameLayout: rl , ll , fl</li>
<li>ListView: lv</li>
<li>WebView: web</li>
<li>CheckBox: cbx</li>
</ul>
<h3 id="控件-id-命名"><a href="#控件-id-命名" class="headerlink" title="控件 id 命名"></a>控件 id 命名</h3><p>控件缩写_含义</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 这是标题栏的标题 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">TextView</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/tv_header_title"</span></div><div class="line">    <span class="attr">...</span> /&gt;</div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">--</span> 这是登录按钮 <span class="attr">--</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">Button</span></span></div><div class="line">    <span class="attr">android:id</span>=<span class="string">"@+id/btn_login"</span></div><div class="line">    <span class="attr">...</span> /&gt;</div></pre></td></tr></table></figure>
<h3 id="布局文件命名"><a href="#布局文件命名" class="headerlink" title="布局文件命名"></a>布局文件命名</h3><ul>
<li><p>Activity 布局：activity_类名.xml，建议使用 Android Studio 生成(Command + N)<br>  <img src="http://odsdowehg.bkt.clouddn.com/屏幕快照 2017-03-14 下午1.59.31.png" alt="屏幕快照 2017-03-14 下午1.59.31 w300"></p>
</li>
<li><p>Fragment 布局：fragment_类名.xml</p>
</li>
<li>控件布局：widget<em>控件名.xml 或 layout</em>控件名.xml</li>
<li>Adapter Item 布局：item_适配器名.xml</li>
</ul>
<h3 id="strings-xml-命名"><a href="#strings-xml-命名" class="headerlink" title="strings.xml 命名"></a>strings.xml 命名</h3><p>类型<em>{范围}</em>功能，范围可选。<br>以下为几种常用的命名：</p>
<ul>
<li>页面标题，命名格式为：title_页面</li>
<li>按钮文字，命名格式为：btn_按钮事件</li>
<li>标签文字，命名格式为：label_标签文字</li>
<li>选项卡文字，命名格式为：tab_选项卡文字</li>
<li>消息框文字，命名格式为：toast_消息</li>
<li>编辑框的提示文字，命名格式为：hint_提示信息</li>
<li>图片的描述文字，命名格式为：desc_图片文字</li>
<li>对话框的文字，命名格式为：dialog_文字</li>
<li>menu 的 item 文字，命名格式为：menu_文字</li>
</ul>
<h3 id="colors-xml-命名"><a href="#colors-xml-命名" class="headerlink" title="colors.xml 命名"></a>colors.xml 命名</h3><p>前缀{<em>控件}{</em>范围}{_后缀}，控件、范围、后缀可选，但控件和范围至少要有一个。</p>
<ul>
<li>背景颜色，添加 bg 前缀</li>
<li>文本颜色，添加 text 前缀</li>
<li>分割线颜色，添加 div 前缀</li>
<li>区分状态时，默认状态的颜色，添加 normal 后缀</li>
<li>区分状态时，按下时的颜色，添加 pressed 后缀</li>
<li>区分状态时，选中时的颜色，添加 selected 后缀</li>
<li>区分状态时，不可用时的颜色，添加 disable 后缀</li>
</ul>
<p>如：bg_loading_selected</p>
<h3 id="drawable的命名"><a href="#drawable的命名" class="headerlink" title="drawable的命名"></a>drawable的命名</h3><ul>
<li>图标类，添加 ic 前缀</li>
<li>背景类，添加 bg 前缀</li>
<li>分隔类，添加 div 前缀</li>
<li>默认类，添加 def 前缀</li>
<li>区分状态时，默认状态，添加 normal 后缀</li>
<li>区分状态时，按下时的状态，添加 pressed 后缀</li>
<li>区分状态时，选中时的状态，添加 selected 后缀</li>
<li>区分状态时，不可用时的状态，添加 disable 后缀</li>
<li>多种状态的，添加 selector 后缀（一般为 ListView 的 selector 或按钮的 selector ）</li>
</ul>
<p>如：ic_launcher_pressed</p>
<h2 id="注释规范"><a href="#注释规范" class="headerlink" title="注释规范"></a>注释规范</h2><h3 id="类和接口注释"><a href="#类和接口注释" class="headerlink" title="类和接口注释"></a>类和接口注释</h3><p>类和接口统一添加javadoc注释，格式如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 类或接口的描述信息</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> $&#123;USER&#125;</div><div class="line"> * <span class="doctag">@date</span> $&#123;DATE&#125;</div><div class="line"> */</div><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Login</span> </span>&#123;</div><div class="line"> </div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h3 id="方法注释"><a href="#方法注释" class="headerlink" title="方法注释"></a>方法注释</h3><p>下面几种方法，都必须添加注释，说明该方法的用途和参数说明，以及返回值。<strong>如不添加注释，方法和参数命名都要见名知意</strong></p>
<ul>
<li>接口中定义的所有方法</li>
<li>抽象类中自定义的抽象方法</li>
<li>抽象父类的自定义公用方法</li>
<li>工具类的公用方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 登录</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> loginName 登录名</div><div class="line"> * <span class="doctag">@param</span> password 密码</div><div class="line"> * <span class="doctag">@param</span> listener 回调监听器</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String loginName, String password, ActionCallbackListener listener)</span></span>;</div></pre></td></tr></table></figure>
<h3 id="变量和常量注释"><a href="#变量和常量注释" class="headerlink" title="变量和常量注释"></a>变量和常量注释</h3><p>下面几种情况下的常量和变量，都要添加注释说明，优先采用 右侧// 来注释，若注释说明太长则在上方添加注释。</p>
<ul>
<li>接口中定义的所有常量</li>
<li>公有类的公有常量</li>
<li>枚举类定义的所有枚举常量</li>
<li>实体类的所有属性变量</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_CASH = <span class="number">1</span>; <span class="comment">// 现金券</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_DEBIT = <span class="number">2</span>; <span class="comment">// 抵扣券</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_DISCOUNT = <span class="number">3</span>; <span class="comment">// 折扣券</span></div><div class="line"> </div><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> id; <span class="comment">// 券id</span></div><div class="line"><span class="keyword">private</span> String name; <span class="comment">// 券名称</span></div><div class="line"><span class="keyword">private</span> String introduce; <span class="comment">// 券简介</span></div></pre></td></tr></table></figure>
<h2 id="发布及安全"><a href="#发布及安全" class="headerlink" title="发布及安全"></a>发布及安全</h2><h2 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h2><p><strong>版本管理一般使用 Git</strong></p>
<ul>
<li>打包前必须pull一下代码</li>
<li><strong>打包发版后，打上tag，push代码</strong></li>
<li><strong>打包后记得保存未加密过的包和mapping文件</strong></li>
</ul>
<ol>
<li>建议使用 Git 进行版本管理，正式打包前先 pull 一下代码，保证发布版本为最新代码；版本发布后，打 tag 并 push 到服务器</li>
<li><p>正式版本需要打开 <strong>混淆</strong>，防止被反编译，gradle 项目在 buildTypes 中配置，混淆的配置文件为 proguard-android.txt</p>
 <figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//必须在productFlavors之后</span></div><div class="line">buildTypes &#123;</div><div class="line">   release &#123;</div><div class="line">       <span class="comment">//开启混淆</span></div><div class="line">       minifyEnabled <span class="keyword">true</span></div><div class="line">       <span class="comment">//打包时移除不用资源</span></div><div class="line">       shrinkResources <span class="keyword">true</span></div><div class="line">       proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></div><div class="line">       <span class="comment">//不同渠道使用不同的签名</span></div><div class="line">       signingConfig signingConfigs.sign</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   debug &#123;</div><div class="line">       signingConfig signingConfigs.sign</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>正式版本发布时需要关闭 Log ，防止 Log 调试信息的打印造成重要数据泄露。一般思路为封装 LogUtil，在其中根据 <strong>BuildConfig.Debug</strong> 判断是否输出日志</p>
</li>
<li>测试第三方SDK时，如对签名有要求，可以在 debug 时使用正式签名</li>
<li>正式发布版本时，可用第三方工具加密，如：360加密、爱加密，<strong>加密后最好测试下，可能会有兼容性问题</strong></li>
<li>打包后记得保存未加密的包并保存 mapping 文件(列出了原始的类，方法和字段名与混淆后代码间的映射)</li>
</ol>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ol>
<li><p>控制语句</p>
<ul>
<li><p>减少条件嵌套，不要超过3层</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Bad</span></div><div class="line"><span class="keyword">if</span>(obj != <span class="keyword">null</span>) &#123; doSomething(); &#125;</div><div class="line"><span class="comment">// Good</span></div><div class="line"><span class="keyword">if</span>(obj == <span class="keyword">null</span>) &#123; <span class="keyword">return</span>; &#125; doSomething();</div></pre></td></tr></table></figure>
</li>
<li><p><strong>if语句必须用{}包括起来,即便是只有一句</strong></p>
</li>
</ul>
</li>
</ol>
<ul>
<li>方法<ul>
<li>拆分臃肿方法，每个方法只作一件事</li>
<li>做同一个逻辑的方法，尽量靠近放到一块，方便查看</li>
<li><strong>尽量不要使用 try catch 处理业务逻辑</strong></li>
<li>使用JSON工具类，不要手动解析和拼装数据，如：Gson</li>
</ul>
</li>
<li>重构相关书籍<ul>
<li>《重构-改善既有代码的设计》</li>
</ul>
</li>
</ul>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>关于 colors.xml 和 drawable 命名很久之前摘自某篇博文，忘记具体链接了，如有侵权，请联系我~</p>
<blockquote>
<p>邮箱：1025263614@qq.com</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;个人总结的 Android 开发规范，其中控件缩写及 Android 资源文件命名部分不是很确定，有待商榷。Java 部分编程风格请参考：&lt;a href=&quot;http://www.hawstein.com/posts/google-java-style.html&quot; targe
    
    </summary>
    
      <category term="Android" scheme="http://www.littlejie.com/categories/Android/"/>
    
      <category term="Java" scheme="http://www.littlejie.com/categories/Android/Java/"/>
    
    
      <category term="Android" scheme="http://www.littlejie.com/tags/Android/"/>
    
      <category term="开发规范" scheme="http://www.littlejie.com/tags/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Gradle 实现 Android 多渠道定制化打包</title>
    <link href="http://www.littlejie.com/2016/10/01/Gradle-%E5%AE%9E%E7%8E%B0-Android-%E5%A4%9A%E6%B8%A0%E9%81%93%E5%AE%9A%E5%88%B6%E5%8C%96%E6%89%93%E5%8C%85/"/>
    <id>http://www.littlejie.com/2016/10/01/Gradle-实现-Android-多渠道定制化打包/</id>
    <published>2016-10-01T04:12:43.000Z</published>
    <updated>2017-03-08T05:13:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>版权声明：本文为博主原创文章，未经博主允许不得转载。</p>
</blockquote>
<p>最近在项目中遇到需要实现 Apk 多渠道、定制化打包， Google 、百度查找了一些资料，成功实现了上述功能，在此记录以备不时之需，温故而知新，可以为师矣~</p>
<p>需求可以总结如下：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://odsdowehg.bkt.clouddn.com/多渠道打包.png" alt="多渠道打包" title="">
                </div>
                <div class="image-caption">多渠道打包</div>
            </figure></p>
<h1 id="如何实现多个-Apk-安装在同一设备"><a href="#如何实现多个-Apk-安装在同一设备" class="headerlink" title="如何实现多个 Apk 安装在同一设备"></a>如何实现多个 Apk 安装在同一设备</h1><p>在之前的印象中，同一个应用在同一设备上只能安装一个，除非手动修改 AndroidManifest.xml 文件中的包名（ <code>package</code> ），但这么做的后果就是新的应用真的是新的应用，旧版应用再也收不到更新。而现在你通过 Gradle，你可以轻松构建多个不同版本的应用，并且在同一设备上安装使用。</p>
<p>这里要用到 <a href="http://google.github.io/android-gradle-dsl/current/com.android.build.gradle.internal.dsl.ProductFlavor.html" target="_blank" rel="external">productFlavors</a> ，productFlavors 可以用来自定义应用构建版本，我们可以用其 <code>applicationId</code> 属性来实现多个 Apk 安装在同一设备上。</p>
<p>build.gradle 中部分配置代码如下：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    compileSdkVersion <span class="number">24</span></div><div class="line">    buildToolsVersion <span class="string">"24.0.1"</span></div><div class="line"></div><div class="line">    <span class="comment">//默认配置,所有 productFlavors 都会继承 defaultConfig 中配置的属性</span></div><div class="line">    defaultConfig &#123;</div><div class="line">        <span class="comment">//默认的 applicationId,一般与 AndroidManifest.xml 文件 package属性相同</span></div><div class="line">        applicationId <span class="string">"com.littlejie.multichannel"</span></div><div class="line">        minSdkVersion <span class="number">15</span></div><div class="line">        targetSdkVersion <span class="number">24</span></div><div class="line">        versionCode <span class="number">1</span></div><div class="line">        versionName <span class="string">"1.0"</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// productFlavors 定义了一个应用的自定义构建版本</span></div><div class="line">    <span class="comment">//一个单一的项目可以同时定义多个不同的 flavor 来改变应用的输出。</span></div><div class="line">    <span class="comment">// productFlavors 这个概念是为了解决不同的版本之间的差异非常小的情况，通常用于区分同一个应用的不同渠道/客户等，可包含少量业务功能差别。</span></div><div class="line">    <span class="comment">// productFlavors 中的 flavor 不能跟 buildType 中的一样,否则会报: "ProductFlavor names cannot collide with BuildType names"</span></div><div class="line">    productFlavors &#123;</div><div class="line"></div><div class="line">        <span class="comment">//默认版本,不设置 applicationId ,继承 defaultConfig 中的配置</span></div><div class="line">        flavors_default &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//开发版本, applicationId 替换为 com.littlejie.multichannel.dev</span></div><div class="line">        flavors_dev &#123;</div><div class="line">            applicationId <span class="string">"com.littlejie.multichannel.dev"</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//发布版本, applicationId 替换为 com.littlejie.multichannel.release</span></div><div class="line">        flavors_release &#123;</div><div class="line">            applicationId <span class="string">"com.littlejie.multichannel.release"</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>MainActivity.java:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = MainActivity.class.getSimpleName();</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        Log.d(TAG, <span class="string">"package name = "</span> + <span class="keyword">this</span>.getPackageName());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 Android Studio 中执行如下命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//打 debug 包，gradle 命令会在后面 `gradle task`中详细讲述</div><div class="line">gradle clean assembleDebug</div></pre></td></tr></table></figure>
<p>打包完成后，将 Apk 安装到模拟器(<code>adb install name.apk</code>)，运行，log 如下：</p>
<p>flavors_default:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">09-17 22:43:55.390 19747-19747/com.littlejie.multichannel D/MainActivity: package name = com.littlejie.multichannel</div></pre></td></tr></table></figure>
<p>flavors_dev:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">09-17 22:11:30.860 2638-2638/com.littlejie.multichannel.dev D/MainActivity: package name = com.littlejie.multichannel.dev</div></pre></td></tr></table></figure>
<p>flavors_release:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">09-17 22:44:55.610 20650-20650/com.littlejie.multichannel.release D/MainActivity: package name = com.littlejie.multichannel.release</div></pre></td></tr></table></figure>
<p>从这里可以看出，不同 flavor 的 package name 被 applicationId 替换掉了，而且同一个模拟器上可以同时安装以上三个应用。</p>
<p>下面我们再看看 AndroidManifest.xml 中发生了什么变化。这里需要用到 aapt 来查看 AndroidManifest.xml 的信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//输出 apk 的 AndroidManifest.xml 文件的信息</div><div class="line">aapt dump xmltree ***.apk AndroidManifest.xml</div></pre></td></tr></table></figure>
<p>关于 aapt 使用的更多用法，可以阅读这篇博文：<a href="http://blog.csdn.net/g19920917/article/details/20244937" target="_blank" rel="external">使用 aapt 查看 apk 的各种信息</a></p>
<p>下面是 flavors_dev 版本的信息，可以看出 Java 源文件的包名并没有发生改变，而 package 属性的值被替换为 applicationId了。</p>
<p><strong>如果在申请第三方 SDK 接入，则对应的包名应该填 applicationId ，而不是 AndroidManifest.xml 中的默认值</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">lishengjiedeMacBook-Pro:apk littlejie$ aapt dump xmltree multichannel-flavors_dev-debug.apk AndroidManifest.xml</div><div class="line">N: android=http://schemas.android.com/apk/res/android</div><div class="line">  E: manifest (line=2)</div><div class="line">    A: android:versionCode(0x0101021b)=(type 0x10)0x1</div><div class="line">    A: android:versionName(0x0101021c)=&quot;1.0&quot; (Raw: &quot;1.0&quot;)</div><div class="line">    //此处 package 的值已替换成 applicationId 的值</div><div class="line">    A: package=&quot;com.littlejie.multichannel.dev&quot; (Raw: &quot;com.littlejie.multichannel.dev&quot;)</div><div class="line">    A: platformBuildVersionCode=(type 0x10)0x18 (Raw: &quot;24&quot;)</div><div class="line">    A: platformBuildVersionName=(type 0x4)0x40e00000 (Raw: &quot;7.0&quot;)</div><div class="line">    E: uses-sdk (line=7)</div><div class="line">      A: android:minSdkVersion(0x0101020c)=(type 0x10)0xf</div><div class="line">      A: android:targetSdkVersion(0x01010270)=(type 0x10)0x18</div><div class="line">    E: application (line=11)</div><div class="line">      A: android:theme(0x01010000)=@0x7f08008e</div><div class="line">      A: android:label(0x01010001)=@0x7f060020</div><div class="line">      A: android:icon(0x01010002)=@0x7f030000</div><div class="line">      A: android:debuggable(0x0101000f)=(type 0x12)0xffffffff</div><div class="line">      A: android:allowBackup(0x01010280)=(type 0x12)0xffffffff</div><div class="line">      A: android:supportsRtl(0x010103af)=(type 0x12)0xffffffff</div><div class="line">      // Activity 的包名还是原来 AndroidManifest.xml 中申明的</div><div class="line">      E: activity (line=17)</div><div class="line">        A: android:name(0x01010003)=&quot;com.littlejie.multichannel.MainActivity&quot; (Raw: &quot;com.littlejie.multichannel.MainActivity&quot;)</div><div class="line">        E: intent-filter (line=18)</div><div class="line">          E: action (line=19)</div><div class="line">            A: android:name(0x01010003)=&quot;android.intent.action.MAIN&quot; (Raw: &quot;android.intent.action.MAIN&quot;)</div><div class="line">          E: category (line=21)</div><div class="line">            A: android:name(0x01010003)=&quot;android.intent.category.LAUNCHER&quot; (Raw: &quot;android.intent.category.LAUNCHER&quot;)</div></pre></td></tr></table></figure>
<p>applicationId 的原理可以理解为在 gradle 打包的时，动态合并属性，将 package 替换为 applicationId 指定的值，但并不会替换 Java 文件的包名，包括生成的 R 文件(可以去对应 module 下的 build/generated 目录下查看对应 flavor 的 R 文件)。 </p>
<p>另外，由于最终生成的包中 AndroidManifest.xml 文件中的 package 属性被 applicationId 替换掉，故对于某些第三方 SDK ，如：微信、高德地图等需要验证包名的，就会碰到相当蛋疼的事，每个包都需要重新去生成 APPID 和 APPKEY，如果渠道很多，那么像微信就会出现问题微信账号申请的应用数就会超出微信的限制。</p>
<p>Android 官方文档原文如下：</p>
<blockquote>
<p>Therefore, we have decoupled the two usages of package name:</p>
<p>The final package that is used in your built .apk’s manifest, and is the package your app is known as on your device and in the Google Play store, is the “application id”.</p>
<p>The package that is used in your source code to refer to your R class, and to resolve any relative activity/service registrations, continues to be called the “package”.</p>
</blockquote>
<p><strong>补充</strong>：<a href="http://tools.android.com/tech-docs/new-build-system/applicationid-vs-packagename" target="_blank" rel="external">ApplicationId versus PackageName</a></p>
<h1 id="替换-AndroidManifest-xml-中的属性"><a href="#替换-AndroidManifest-xml-中的属性" class="headerlink" title="替换 AndroidManifest.xml 中的属性"></a>替换 AndroidManifest.xml 中的属性</h1><p>这里可以参考友盟统计 SDK 中使用的方案。该方案通过在 AndroidManifest.xml 文件中 <code>application</code> 标签下指定 <code>&lt;mate-data&gt;</code> 设置占位符来实现动态替换属性值。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">meta-data</span> <span class="attr">android:name</span>=<span class="string">"UMENG_CHANNEL"</span> <span class="attr">android:value</span>=<span class="string">"$&#123;UMENG_CHANNEL&#125;"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>占位符形如<code>${name}</code>，在最终执行 AndroidManifest.xml 文件合并的时候，占位符会被 build.gradle 中对应值取代。 build.gradle 的配置需要用到上节讲到的 productFlavors 的 <code>manifestPlaceholders</code> 属性， <code>manifestPlaceholders</code> 属性直译过来就是<em>清单文件占位符</em>。</p>
<p>下面是 <code>build.gradle</code> 的节选代码：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">productFlavors &#123;</div><div class="line"></div><div class="line">   <span class="comment">//将 AndroidManifest.xml 文件中的 $&#123;UMENG_CHANNEL&#125; 替换为 default</span></div><div class="line">   flavors_default &#123;</div><div class="line">       manifestPlaceholders = [UMENG_CHANNEL: <span class="string">"defalut"</span>]</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   flavors_dev &#123;</div><div class="line">       applicationId <span class="string">"com.littlejie.multichannel.dev"</span></div><div class="line">       manifestPlaceholders = [UMENG_CHANNEL: <span class="string">"dev"</span>]</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   flavors_release &#123;</div><div class="line">       applicationId <span class="string">"com.littlejie.multichannel.release"</span></div><div class="line">       manifestPlaceholders = [UMENG_CHANNEL: <span class="string">"release"</span>]</div><div class="line">   &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你要替换多个属性，则只需要将 <code>manifestPlaceholders</code> 的写法如下：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">manifestPlaceholders = [VALUE_NAME1 : <span class="string">"value"</span> , VALUE_NAME2 : <span class="string">"value"</span>]</div></pre></td></tr></table></figure>
<p><strong>补充</strong>：关于 AndroidManifest 文件合并规则可以查看 <a href="http://tools.android.com/tech-docs/new-build-system/user-guide/manifest-merger" target="_blank" rel="external">官方文档</a></p>
<h1 id="替换资源文件"><a href="#替换资源文件" class="headerlink" title="替换资源文件"></a>替换资源文件</h1><p>多渠道打包的时候可能会碰到这种情况：每个应用市场的启动页图标、应用名称可能会有点小出入，更有甚者，连布局都不一样。这时候我们该怎么办呢？</p>
<p>有一种解决办法就是：在代码里进行判断，根据渠道的不一样，加载不同的图片和布局，这是一种解决办法。但是当渠道有很多时，代码就会变得很难维护，而且指定渠道用到的资源文件都会被打入所有 Apk 中。所以这个方法并不值得推荐。那么，有什么好的解决办法呢？</p>
<p>办法 Google 早就给我们想好了，而且相当简单，那就是：<strong>在 main 的同级目录下创建以渠道名命名的文件夹，然后创建资源文件（路径要与 main 中的一致），然后打包的时候 gradle 就会自己替换或者合并资源。</strong></p>
<p>例如， App 的默认 icon 路径为 <code>main\res\mipmap-hdpi\ic_launcher.png</code> ，那么 flavors_dev的路径就为 <code>flavors_dev\res\mipmap-hdpi\ic_launcher.png</code> ，打包 flavors_dev 渠道的时候会自动替换图片。</p>
<p>对于资源合并，如果在 main 下的 strings.xml 内容为：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>MultiChannel<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"string_merge"</span>&gt;</span>我是string,我暂时没被合并<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在 flavors_dev 下的 strings.xml 内容为：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"string_merge"</span>&gt;</span>我是dev_string,我会把string合并<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当打 flavors_dev 渠道包时，最终 strings.xml 会变成：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>MultiChannel<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"string_merge"</span>&gt;</span>我是dev_string,我会把string合并<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></div></pre></td></tr></table></figure>
<p>以上特性可以用来<strong>替换 Apk 的应用名称和应用图标</strong>，这比使用前面讲到的占位符方便很多。同理，替换图片和合并颜色的原理也相似。</p>
<h1 id="多渠道使用独立签名"><a href="#多渠道使用独立签名" class="headerlink" title="多渠道使用独立签名"></a>多渠道使用独立签名</h1><p>多渠道打包的时候，可能每个渠道包的签名都必须不一样，真正做到定制化，那么，怎么实现每个渠道包使用指定的签名呢？</p>
<p>平时我们打包的时候是这样的：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">signingConfigs &#123;</div><div class="line">   release &#123;</div><div class="line">       storeFile <span class="keyword">file</span>(<span class="string">"签名文件路径"</span>)</div><div class="line">       storePassword <span class="string">"storePassword"</span></div><div class="line">       keyAlias <span class="string">"keyAlias"</span></div><div class="line">       keyPassword <span class="string">"keyPassword"</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">buildTypes &#123;</div><div class="line">   release &#123;</div><div class="line">       minifyEnabled <span class="keyword">true</span></div><div class="line">       proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></div><div class="line">       shrinkResources <span class="keyword">true</span></div><div class="line">       <span class="comment">//指定打 release 包时使用的签名文件</span></div><div class="line">       signingConfig signingConfigs.release</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="comment">//如果 debug 包需要测试诸如微信、地图等第三方 sdk ，则可以指定 debug 包使用 release 包的签名</span></div><div class="line">   <span class="comment">//debug &#123;</span></div><div class="line">   <span class="comment">//    signingConfig signingConfigs.release</span></div><div class="line">   <span class="comment">//&#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而给每个渠道包指定签名其实也差不多。</p>
<p>Google 官方原话：</p>
<blockquote>
<p>This enables either having all release packages share the same SigningConfig, by setting android.buildTypes.release.signingConfig, or have each release package use their own SigningConfig by setting each android.productFlavors.*.signingConfig objects separately.</p>
</blockquote>
<p>大意就是，在 buildType 下指定签名的具体属性，形如 <code>android.productFlavors.*.signingConfig signingConfigs.*</code> ，前一个 <code>*</code> 指代在 productFlavors 中定义的 flavor ，后一个 <code>*</code> 指代在 signingConfigs 定义的属性。值得注意的是，signingConfigs 必须定义在 buildType 之前。</p>
<p>以下是 build.gradle 的配置节选：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义签名属性</span></div><div class="line">signingConfigs &#123;</div><div class="line">   flavors_default &#123;</div><div class="line">       <span class="comment">//如果签名文件在项目的根目录下,则可以这么写</span></div><div class="line">       storeFile <span class="keyword">file</span>(<span class="string">"../littlejie.jks"</span>)</div><div class="line">       storePassword <span class="string">"******"</span></div><div class="line">       keyAlias <span class="string">"******"</span></div><div class="line">       keyPassword <span class="string">"*****"</span></div><div class="line">   &#125;</div><div class="line"></div><div class="line">   flavors_dev &#123;</div><div class="line">       storeFile <span class="keyword">file</span>(<span class="string">"../littlejie_dev.jks"</span>)</div><div class="line">       storePassword <span class="string">"*****"</span></div><div class="line">       keyAlias <span class="string">"*****"</span></div><div class="line">       keyPassword <span class="string">"*****"</span></div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">buildTypes &#123;</div><div class="line">   release &#123;</div><div class="line">       minifyEnabled <span class="keyword">true</span></div><div class="line">       proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></div><div class="line">       shrinkResources <span class="keyword">true</span></div><div class="line"></div><div class="line">       <span class="comment">//多个 flavor ,指定 flavor 使用指定 签名</span></div><div class="line">       productFlavors.flavors_default.signingConfig signingConfigs.flavors_default</div><div class="line">       productFlavors.flavors_dev.signingConfig signingConfigs.flavors_dev</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="comment">//如果 debug 包需要测试诸如微信、地图等第三方 sdk ，则可以指定 debug 包使用 release 包的签名</span></div><div class="line">   <span class="comment">//debug 并不能设置多个签名</span></div><div class="line">   <span class="comment">//debug &#123;</span></div><div class="line">   <span class="comment">//   productFlavors.flavors_default.signingConfig signingConfigs.flavors_default</span></div><div class="line">   <span class="comment">//   productFlavors.flavors_dev.signingConfig signingConfigs.flavors_dev</span></div><div class="line">   <span class="comment">//&#125;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我们来验证下生成的包的签名是否正确，查看签名我们会用到如下两个命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//查看签名文件的属性</div><div class="line">keytool -list -keystore 签名文件</div><div class="line"></div><div class="line">//查看 apk 的签名，需要提前解压 apk ，获取 CERT.RSA（位于解压目录下 /META-INF 下）</div><div class="line">//以下命令行是在 apk 解压目录下执行</div><div class="line">keytool -printcert -file META-INF/CERT.RSA</div></pre></td></tr></table></figure>
<p>更多 keytool 命令使用可以查看 <a href="https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html" target="_blank" rel="external">官方文档</a></p>
<p>首先，我们来看下 littlejie.jks 的信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">lishengjiedeMacBook-Pro:AndroidDemo littlejie$ keytool -list -keystore littlejie.jks</div><div class="line">输入密钥库口令:</div><div class="line"></div><div class="line">密钥库类型: JKS</div><div class="line">密钥库提供方: SUN</div><div class="line"></div><div class="line">您的密钥库包含 1 个条目</div><div class="line"></div><div class="line">littlejie, 2016-9-18, PrivateKeyEntry,</div><div class="line">证书指纹 (SHA1): A2:B1:BF:BF:F1:F3:26:F4:FD:0C:94:95:B5:32:90:69:24:F7:99:84</div></pre></td></tr></table></figure>
<p>解压 multichannel-flavors_default-release.apk ，查看 CERT.RSA 信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">lishengjiedeMacBook-Pro:apk littlejie$ keytool -printcert -file multichannel-flavors_default-release/META-INF/CERT.RSA</div><div class="line">所有者: CN=littlejie</div><div class="line">发布者: CN=littlejie</div><div class="line">序列号: 71693e05</div><div class="line">有效期开始日期: Sun Sep 18 17:20:34 CST 2016, 截止日期: Thu Sep 12 17:20:34 CST 2041</div><div class="line">证书指纹:</div><div class="line">	 MD5: AC:12:83:51:44:FC:82:68:8B:23:7B:E9:12:24:AE:52</div><div class="line">	 SHA1: A2:B1:BF:BF:F1:F3:26:F4:FD:0C:94:95:B5:32:90:69:24:F7:99:84</div><div class="line">	 SHA256: AD:04:19:5F:92:00:0D:FA:7C:E5:8A:12:57:72:4C:1E:0E:2E:FC:0D:92:28:05:D0:CC:42:FC:93:95:44:88:88</div><div class="line">	 签名算法名称: SHA256withRSA</div><div class="line">	 版本: 3</div></pre></td></tr></table></figure>
<p>可以发现两者的 SHA1 值是相等的。</p>
<p>同理，可以查看 littlejie_dev.jks 和 multichannel-flavors_dev-release.apk 的签名信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">//littlejie_dev.jks 的签名信息</div><div class="line">lishengjiedeMacBook-Pro:AndroidDemo littlejie$ keytool -list -keystore littlejie_dev.jks</div><div class="line">输入密钥库口令:</div><div class="line"></div><div class="line">密钥库类型: JKS</div><div class="line">密钥库提供方: SUN</div><div class="line"></div><div class="line">您的密钥库包含 1 个条目</div><div class="line"></div><div class="line">littlejie, 2016-9-18, PrivateKeyEntry,</div><div class="line">证书指纹 (SHA1): B4:25:67:A5:9F:8C:1F:12:BD:85:6B:2D:FE:71:62:57:8A:CC:AE:E2</div><div class="line"></div><div class="line">//multichannel-flavors_dev-release.apk 的签名信息</div><div class="line">lishengjiedeMacBook-Pro:apk littlejie$ keytool -printcert -file multichannel-flavors_dev-release/META-INF/CERT.RSA</div><div class="line">所有者: CN=littlejie</div><div class="line">发布者: CN=littlejie</div><div class="line">序列号: 48346e15</div><div class="line">有效期开始日期: Sun Sep 18 17:21:23 CST 2016, 截止日期: Thu Sep 12 17:21:23 CST 2041</div><div class="line">证书指纹:</div><div class="line">	 MD5: 15:E9:E1:67:AB:33:8B:04:A4:C3:D0:05:8F:A6:35:37</div><div class="line">	 SHA1: B4:25:67:A5:9F:8C:1F:12:BD:85:6B:2D:FE:71:62:57:8A:CC:AE:E2</div><div class="line">	 SHA256: 96:A5:14:EC:28:25:32:0D:3E:D0:DB:D0:84:06:E7:9C:17:D7:91:83:A4:51:93:AB:34:3E:D9:FD:C5:FA:A1:8E</div><div class="line">	 签名算法名称: SHA256withRSA</div><div class="line">	 版本: 3</div></pre></td></tr></table></figure>
<p>但是这里有个问题，就是这种给某个 flavor 指定签名的方法对 debug 无效，有兴趣的同学可以看上述注释掉的 debug 签名部分配置。简单来说，debug 签名只能指定一个或者使用默认的 debug 签名。</p>
<p>若哪位大神有解决方案，欢迎指出~</p>
<p>这里再做几点补充：</p>
<ol>
<li>多渠道使用独立签名，<strong>打包时千万不要使用 Android Studio 中 Build 菜单下的 Generate Signed APK</strong>，因为当你使用这个打包的时候， Android Studio 会让你指定使用的签名文件， so 你就等着哭吧~楼主因为这个折腾了半天。解决方法就是使用 gradle tasks。传送门：<a href="http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Android-tasks" target="_blank" rel="external">Android Gradle Build Tasks</a></li>
<li>鉴于第一点中的传送门需要翻墙，所以在这里简单介绍一下 <a href="http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Android-tasks" target="_blank" rel="external">Android Gradle Build Tasks</a> 的使用。<ul>
<li>打全部包： <code>gradle assemble</code></li>
<li>打全部 Debug 包： <code>gradle assembleDebug</code> ，可以简写为 <code>gradle aD</code> ，前提是没有相同缩写的参数</li>
<li>打全部 Release 包： <code>gradle assembleRelease</code>，可以简写为 <code>gradle aR</code></li>
<li>打指定 flavor 包： <code>gradle assemble(flavor)(Debug|Release)</code></li>
<li>打包完成后安装（设备上没有安装该 apk ，否则会失败，而且只能指定 flavor ，不然也会失败）： <code>gradle install(flavor)（Debug|Release）</code></li>
<li>打包前先 clean 一下(在测试的时候很必要，如果不 clean 的话，可能会导致某些小修改不会及时打入新包)： <code>gradle clean assembleDebug</code></li>
</ul>
</li>
</ol>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>有童鞋在评论中说：使用 productFlavors 打包效率太低，的确是这样， gradle 好用是好用，就是打包效率低。如果只是单纯生成渠道包，建议使用<a href="http://tech.meituan.com/mt-apk-packaging.html" target="_blank" rel="external">美团多渠道打包方案</a>，另外 360 加固也是一种不错的选择，效率都比使用 gradle 来的高。但如果需要替换 Apk 中的图片、字符串、应用的 applicationId 、给指定渠道的包使用指定的签名，那么只能乖乖使用 gradle 打包了，慢你也得忍着~</p>
<p>之前刚开始调研的时候，发现 Github 上有个 <a href="https://github.com/SSOOnline/ApkCustomizationTool" target="_blank" rel="external">ApkCustomizationTool</a> 项目，它是通过对 Apk 解包，替换图片、字符串，然后重新签名，不过这毕竟是事后诸葛亮，控制在打包的源头总是毕竟好的，有兴趣的同学可以去研究下。</p>
<p>不知大家有没有这种感受，每次发版上传渠道的时候想死有没有？o(╯□╰)o</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>以上就是自己在使用 Gradle 实现 Android 多渠道打包时碰到的问题， Android 官方关于使用 Gradle 的<a href="http://tools.android.com/tech-docs/new-build-system/user-guide" target="_blank" rel="external">文档</a>已经很详细了，自己总结的只是一点皮毛，有时间要去自习研读下。</p>
<blockquote>
<p>读万卷书，行万里路~</p>
</blockquote>
<p><strong>参考</strong>：</p>
<ol>
<li><a href="http://tools.android.com/tech-docs/new-build-system/user-guide" target="_blank" rel="external">Gradle Plugin User Guide</a></li>
<li><a href="http://google.github.io/android-gradle-dsl/current/" target="_blank" rel="external">Android Plugin DSL Reference</a></li>
<li><a href="http://unclechen.github.io/2015/10/22/Android-Studio-Gradle%E5%AE%9E%E8%B7%B5%E4%B9%8B%E5%A4%9A%E6%B8%A0%E9%81%93%E8%87%AA%E5%8A%A8%E5%8C%96%E6%89%93%E5%8C%85+%E7%89%88%E6%9C%AC%E5%8F%B7%E7%AE%A1%E7%90%86/" target="_blank" rel="external">Android Studio Gradle实践之多渠道自动化打包+版本号管理</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;版权声明：本文为博主原创文章，未经博主允许不得转载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最近在项目中遇到需要实现 Apk 多渠道、定制化打包， Google 、百度查找了一些资料，成功实现了上述功能，在此记录以备不时之需，温故而知新，可以为
    
    </summary>
    
      <category term="Android" scheme="http://www.littlejie.com/categories/Android/"/>
    
      <category term="Gradle" scheme="http://www.littlejie.com/categories/Android/Gradle/"/>
    
    
      <category term="Android" scheme="http://www.littlejie.com/tags/Android/"/>
    
      <category term="Gradle" scheme="http://www.littlejie.com/tags/Gradle/"/>
    
      <category term="多渠道打包" scheme="http://www.littlejie.com/tags/%E5%A4%9A%E6%B8%A0%E9%81%93%E6%89%93%E5%8C%85/"/>
    
  </entry>
  
</feed>
